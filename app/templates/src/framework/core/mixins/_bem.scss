// ===================================================
// BEM Helper
// ===================================================

// Element
// =======
// Build a BEM Element
//
// @param  {string} $name - Element name
//
// @example
//   .test {
//     height: 200px;
//     @include element(mod) {
//       color: red;
//     }
//   }
//
// @output
//   .test {
//     height: 200px;
//   }
//   .test__mod {
//     color: red;
//   }
@mixin element($name) {
  @at-root {
    &#{map-get($kittn-bem, element)}#{$name} {
      @content;
    }
  }
}

// Modifier
// ========
// Build a BEM Modifier. Add a Modification Class
// (independent form parent style)
//
// @param  {string} $name - Modifier name
//
// @example
//   .test {
//     height: 200px;
//     @include modifier(mod) {
//       color: red;
//     }
//   }
//
// @output
//   .test {
//     height: 200px;
//   }
//   .test--mod {
//     color: red;
//   }
@mixin modifier($name, $extend: false) {
  @at-root {
    &#{map-get($kittn-bem, modifier)}#{$name} {
      @content;
    }
  }
}

// Instance
// ========
// Build a BEM Instance. Use the parent style and combine it with
// the instance class.
//
// @param  {string} $name - Instance name
//
// @example
//   .test {
//     display: inline-block;
//     @include instance(instance) {
//       height: 200px;
//     }
//   }
//
// @output
//   .test, .test---instance {
//     display: inline-block;
//   }
//   .test---instance {
//     height: 200px;
//   }
@mixin instance($name) {
  // Get the Parent Selector name
  $e: &;

  @at-root {
    &#{map-get($kittn-bem, instance)}#{$name} {
      // Extend with the Parent Element
      @extend #{$e};
      @content;
    }
  }
}

// Chainroot
// =========
// Setup the Root Element for multiple chained Modifiers.
//
// @example
//   .test {
//     @include chainroot {
//      content: hello;
//     }
//   }
//
// @output
//   .test, [class^="test"] {
//     content: hello;
//   }
@mixin chainroot {
  // Define the Parent Class - for Nested Chains
  $r: &;
  $root: str-slice('#{$r}',2,str-length('#{$r}'));

  @at-root {
    &, [class^="#{$root}"] {
      @content;
    }
  }
}

// Chain
// =====
// Build the multiple chain modifier
//
// @param  {string} $name - Modifier names
//
// @example
//   .main {
//     @include chain(smaller) {
//       width: 300px;
//     }
//
//     @include chain(fill) {
//       background-color: red;
//     }
//   }
//
// @output
//   [class^="main"][class*="--smaller"] {
//     width: 300px;
//   }
//
//   [class^="main"][class*="--fill"] {
//     background-color: red;
//   }
@mixin chain($name) {
  $p: &;
  $parent: str-slice('#{$p}',2,str-length('#{$p}'));

  @at-root {
    [class^="#{$parent}"][class*="#{map-get($kittn-bem, modifier)}#{$name}"] {
      @content;
    }
  }
}
