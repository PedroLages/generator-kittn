{"name":"Generator-kittn","tagline":"The Yeoman Kittn Generator","body":"![](http://i.imgur.com/2MtKGwj.jpg)\r\n\r\n## Introduction\r\n\r\n\"Kittn\" is a toolkit designed to support mainly the construction of frontends. Anyone looking for a colorful mixture of prefabricated elements, as one would expect from bootstrap and co, will not be happy with Kittn. Here rather the methods are offered to those elements on a simple way to generate and expand.\r\n\r\nAround the CSS part, there are still many automatic functions installed that help the developer. For example, to generate image assets and distribute, to build HTML mockups, to make sprites to generate fallbacks for SVG files. That's why I also avoid the term framework.\r\n\r\n> Against the terminal you should have no fear :p\r\n\r\n## Dependencies\r\nIn order to work with \"Kittn\", you need to install some extensions and environments. Anyone who has installed these tools, which can skip the step.\r\n\r\n### Environments\r\n\r\n> The toolkit has been tested so far on Mac systems! On Windows systems, there can be problems.\r\n\r\n- Ruby >= 1.9.0\r\n- Node >= 0.10.10\r\n\r\nOn Mac systems, Ruby is already installed, this step would be omitted. But if you like you can update on Ruby v.2.12. \r\nTo install Ruby on Windows, simply use the [One Click Installer](http://rubyinstaller.org/downloads/)\r\n\r\n> Currently Sass is compiled with `Ruby-Sass`. When `Libsass` is 100% productive usable, the Ruby dependency is omitted.\r\n\r\nNode can be installed on Mac systems either [Brew](http://brew.sh) or you can use the [Installer](http://nodejs.org/), then for both systems.\r\n\r\n### Extensions & Compiler\r\n\r\n- Sass 3.4.0 rc.1\r\n- Jade 1.3.0\r\n- Gulp 3.8.5\r\n- Grunt 0.4.5\r\n- Bower 1.3.0\r\n- Yeoman 1.2.0\r\n- Git\r\n\r\n> The generator installed automatically `Grunt`, `Bower` and `Yeoman`.\r\n\r\n#### Sass\r\nThe current version 3.4.0 RC1 must be installed because the framework makes use of the extended scripted Ampersand.\r\n\r\n```bash\r\ngem install sass --pre\r\n```\r\n\r\n#### Jade\r\nAfter the first `gulp init`, so the first HTML files will be compiled with the Jade compiler. Later you can decide whether to write native HTML or wants to continue working with Jade.\r\n\r\n```bash\r\nnpm install -g jade\r\n```\r\n\r\n#### Gulp\r\nAll tasks - even `Grunt` tasks - can be started with `Gulp`.\r\n\r\n```bash\r\nnpm install -g gulp\r\n```\r\n\r\n#### Git\r\n\r\nThose who have not yet installed Git, this should please do so now, as `Bower` directly accessing Github. [Download](http://git-scm.com/download)\r\n\r\n---\r\n\r\n## Install Kittn\r\nOnce the dependencies are installed, the generator is installed.\r\n\r\n```bash\r\nnpm install -g generator-kittn\r\n```\r\n\r\nDer Generator wird dabei automatisch `Yeoman`, `Grunt` und `Bower` installieren, wenn diese noch nicht installiert waren. Kittn liegt jetzt als global installiertes Paket vor.\r\n\r\nThe generator will automatically install `Yeoman`, `Grunt` and `Bower`, when they not installed on the system. Kittn is now available as a globally installed package.\r\n\r\nTo use Kittn, you created a project directory itself and activates the generator:\r\n\r\n```bash\r\nyo kittn\r\n```\r\n\r\nThe generator will now ask a series of questions with which the `package.json` and bower.json` be configured.\r\n\r\n![](http://i.imgur.com/6h8SwsC.gif)\r\n\r\nOf greater importance are the last three questions:\r\n\r\n**CSS Filename** : Determines the general file name of the CSS file.\r\n\r\n**Do you need IE8 compatibility?** : If this question is answered with `y`, two CSS files are generated. In HTML files, calling the two files is then also available (otherwise only one CSS file is called).\r\n\r\n**Do you want to use Jade as HTML Compiler?** : If this question is answered with `y` the Jade compiler is running permanently. When `n`, Jade is used only for the first compilation of the HTML files and then shut off.\r\n\r\nAfter answering the last question, Yeoman will download all the project-related dependencies with `Bower` and `NPM`.\r\n\r\n---\r\n\r\n## Setup\r\nAfter the installation is complete, the project must be **initialized**.\r\n\r\n```bash\r\ngulp init\r\n```\r\n\r\n_Init Process:_\r\n\r\n- Build a individual Modernizr Build and Copy to `dist`\r\n- Copy System Files to `dist`\r\n- Copy JS Files to `dist`\r\n- Copy HTML Images from `src/stash/images/html-images/html-assets/` to `dist/images`\r\n- Start the `grunt` Build Image Task\r\n    - Copy to `dist/assets/img/sprite/`\r\n    - Copy to `dist/assets/img/sprite_2x/`\r\n    - Build Retina Sprite `src/sass/maps/`\r\n    - Build NonRetina Sprite `src/sass/maps/`\r\n    - Rebuild Retina Sprite Map `dist/assets/img/`\r\n    - Rebuild NonRetina Sprite Map `dist/assets/img/`\r\n    - SVG Minify and Copy to `dist/assets/img/svg/`\r\n    - Build PNG Fallback Image `dist/assets/img/svg`\r\n    - SVG Minify and Copy to `dist/assets/img/svgonly/`\r\n    - Copy Texture Image to `dist/assets/img/texture/`\r\n    - Copy Single Images to `dist/assets/img/single/`\r\n    - Build Image Map `src/sass/maps/`\r\n- Compile Sass Files from `src/sass/` into `dist/assets/css/` \r\n- Compile Jade Files from `src/jade/` into `dist/`\r\n- Check JS File from `src/js/` and copy it to `dist/assets/js/`\r\n- Combine some JS Files and copy it to `dist/assets/js/scripts.js`\r\n\r\nWhen initializing, different files from `scr` directory will be copied to the distribution `dist` directory. In addition, `js` files are combined, `html` and `css` would be compiled.\r\n\r\n> Important! You will always work in the `src` directory. There, all source data are stored, which are then processed on Gulp task on.\r\n\r\nIn order now to begin the work activate the `default task`:\r\n\r\n```bash\r\ngulp\r\n```\r\n\r\nGulp will activate the server that provides a preview in realtime on the browser - the browser is automatically refreshed after every change on the filesystem. Within the `src` directory `js`, `Jade` and `Sass` files are monitored for a change in the compiler is active - in the case of Javascript JSHint will check code quality.\r\n\r\n> I deliberately use no CoffeeScript because it has just performed in teamwork to confusion. If you still want to use CoffeeScript, only the corresponding plugin must install.\r\n\r\nThose who want to extend the file monitoring to images, can use the `extended default task`:\r\n\r\n```bash\r\ngulp extended\r\n```\r\n\r\nA modification of files, as well as adding or deleting will activate the task, eg is from SVG files automatically generates a PNG fallback.\r\n\r\n> It may be that the Extend task is not responding at the beginning of changes in the image (`src/stash/images/`) directory. Since no images at the beginning exist that can `Gulp` watch. Preparing in this case the images on `gulp grunt-rebuild-images` and then activate the extended task.\r\n\r\n_Process for the extended default task:_\r\n\r\n**`src/stash/images/css-images/svg/`**\r\n\r\n- Watch Directory\r\n- On File Change\r\n    - Clean SVG Directory `dist/assets/img/svg/`\r\n    - SVG Minify and Copy to `dist/assets/img/svg/`\r\n    - Build PNG Fallback Image\r\n    - Rebuild Image Map\r\n\r\n**`src/stash/images/css-images/svgonly/`**\r\n\r\n- Watch Directory\r\n- On File Change\r\n    - Clean SVG Directory `dist/assets/img/svgonly/`\r\n    - SVG Minify and Copy to `dist/assets/img/svgonly/`\r\n\r\n**`src/stash/images/css-images/single-assets/`**\r\n\r\n- Watch Directory\r\n- On File Change\r\n    - Clean Single Directory `dist/assets/img/single/`\r\n    - Copy to `dist/assets/img/single/`\r\n    - Rebuild Image Map\r\n\r\n**`src/stash/images/css-images/texture-assets/`**\r\n\r\n- Watch Directory\r\n- On File Change\r\n    - Clean Texture Directory `dist/assets/img/texture/`\r\n    - Copy to `dist/assets/img/texture/`\r\n    - Rebuild Image Map\r\n  \r\n**`src/stash/images/css-images/sprite-assets/`**\r\n\r\n- Watch Directory\r\n- On File Change\r\n    - Clean Texture Directory `dist/assets/img/sprite/`\r\n    - Clean Texture Directory `dist/assets/img/sprite_2x/`\r\n    - Copy to `dist/assets/img/sprite/`\r\n    - Copy to `dist/assets/img/sprite_2x/`\r\n    - Build Retina Sprite\r\n    - Build NonRetina Sprite\r\n    - Rebuild Retina Sprite Map\r\n    - Rebuild NonRetina Sprite Map\r\n\r\n### Tasks\r\n\r\n**`gulp init`**<br>\r\nFor the first initialization of the project.\r\n\r\n**`gulp`**<br>\r\nDefault Task\r\n\r\n**`gulp extended`**<br>\r\nExtended default task - monitors image data\r\n\r\n**`gulp rebuild-js`**<br>\r\nAll the Javascript files are rebuilded (combined, copied, checked)\r\n\r\n**`gulp publish`**<br>\r\nThe project data is prepared for production. CSS, JS and image data are compressed. The documenation with `sassdoc` is generated.\r\n\r\n**`gulp jade-rebuild`**<br>\r\nRebuild all Jade Files\r\n\r\n**`gulp bump`**<br>\r\nPatch the Version Number from `package.json` and `bower.json` (0.0.1)\r\n\r\n**`gulp bump-minor`**<br>\r\nExtend the Minor Version Number from `package.json` and `bower.json` (0.1.0)\r\n\r\n**`gulp bump-major`**<br>\r\nExtend to the next Release Number from `package.json` and `bower.json` (1.0.0)\r\n\r\n**`gulp grunt-rebuild-images`**<br>\r\nRebuild all Image Files.\r\n\r\n**`gulp grunt-responsive-images`**<br>\r\nBuild different Sizes from HTML Images\r\n\r\n---\r\n\r\n## Structure\r\nAs already explained, one will usually always work in `src` directory.\r\n\r\n`root`<br>\r\n`.. dist/` distribution<br>\r\n`.. src/` source\r\n\r\nThe internal structure of the `dist /` directory looks like this:\r\n\r\n`dist/`<br>\r\n`.. assets/`<br>\r\n`.... css/` CSS files<br>\r\n`.... img/` CSS included images<br>\r\n`...... system/` Systemimages like favicon<br>\r\n`...... single/` CSS single images<br>\r\n`...... textures/` CSS texture images<br>\r\n`.... js/` JS files<br>\r\n`.... fonts/` Webfonts & iconfonts<br>\r\n`.. images/` HTML included images\r\n\r\nIf you therefore should not be satisfied, you can change the structure of the `package.json`:\r\n\r\n![](http://i.imgur.com/NfKvIcv.png)\r\n\r\n> If the paths are changed, the paths must be in the Sass setup file (`src/sass/_setup.scss -> $kittn-directorys`) also be changed accordingly\r\n\r\nThis should happen before the `gulp init` of course, otherwise you have to rename the directories manually, or you delete `dist` simple and then starts the `gulp init` again.\r\n\r\nThe internal structure of the `src /` directory:\r\n\r\n`src/` <br>\r\n`.. jade/` Jade files<br>\r\n`.. js/` JS files<br>\r\n`.. markdown/` External texts in Markdown format<br>\r\n`.. sass/` Sass framework<br>\r\n`.. stash/` filing<br>\r\n`.... .sytem/` Internal system files<br>\r\n`.... bower/` Bower dependencies<br>\r\n`.... fonts/` Font files<br>\r\n`.... images/` Image sources<br>\r\n`...... css-images/` CSS included images<br>\r\n`........ single-assets/` Place for each single assets<br>\r\n`........ sprite-assets/` Place for each sprite assets<br>\r\n`........ svg-assets/` Place for each svg assets with a generated png fallback<br>\r\n`........ svgonly-assets/` Place for each svg assets without fallbacks<br>\r\n`........ texture-assets/` Place for each texture asset<br>\r\n`...... html-images/`<br>\r\n`........ html-assets/` HTML included images<br>\r\n`.... scripts/` Script files that are not installed on Bower<br>\r\n\r\n---\r\n\r\n## Image Handling\r\n\r\nThe directory structure is particularly important for the preparation and processing of the images files.\r\n\r\nIn the directory `src/stash/images/` there are two subfolders `css-images/` and `html-images` - for the record differs \"Kittn\" between CSS and HTML embedded images. Within this folder, there are empty PSD files, they own but only for users who already work with Photoshop or Photoshop CC CC2014, because here is only the [generator](http://blogs.adobe.com/photoshopdotcom/2013/09/introducing-adobe-generator-for-photoshop-cc.html).\r\n\r\n![Generator in Action](http://i.imgur.com/WQo9hGf.gif)\r\n\r\n- `src/stash/images/css-images/sprite.psd` Asset file for all sprite images (retina & nonRetina)\r\n- `src/stash/images/css-images/single.psd` Asset file for all single images\r\n- `src/stash/images/css-images/texture.psd` Asset file for all texture images\r\n- `src/stash/images/html-images/html.psd` Asset file for HTML Images\r\n\r\n![Generator Syntax Schema](http://i.imgur.com/8J36h63.jpg)\r\n\r\nThe syntax is relatively easy to handle:\r\n\r\n- `filename.png` Generates a PNG\r\n- `200% filename.gif` Generates a gif with a 200% scaling\r\n- `filename.jpg70%` Generates a JPG with 70% quality\r\n- `200% filename@2x.png, filename.png` Generates two PNG files, one in Double resolution (retina)\r\n\r\nPlease note the sprites file name of the retina Qualifying ends with @ 2x in NonRetina eliminates the postfix.\r\n\r\nMore [information to the generator](http://pixelhusten.tumblr.com/post/77743297904/let-photoshop-do-the-dirty-work) (German) - also how you can create with Photoshop SVG.\r\n\r\n> The generator will then generate new assets if something in the PSD file changes (eg move a Layer), but you do not even save the file. Once you `gulp extended` can run on the possibly be disturbing, because the processes are then started as well.\r\n\r\n![Execution example with Sprite](http://i.imgur.com/lMSzjU6.jpg)\r\n\r\nThe PSDs are all already connected to the generator. Once you labeled Layer/ groups according to the generator syntax and stores, the assets are stored in their respective folders (with the suffix `assets`).\r\n\r\nWork with the generator is optional if one should be too cumbersome to work or if you have no Photoshop CC at your disposal, which can also its assets as he is used to generate. The important thing is that always end up the image files in the appropriate directories.\r\n\r\n> It is very important to make sure that the PSDs (or any other File) can not be more than 100 MB in size, so before committing the file size should be controlled. Github responding when you push very 'allergic' to files over 100 MB, which often leads to termination.\r\n\r\n---\r\n\r\n## Build HTML with Jade\r\n[Jade](http://jade-lang.com/) is a HTML compiler that is in principle used for the first generation of the HTML files, then it is the developer free to decide for themselves whether they want to use Jade on. For example, who works directly with WordPress will not need Jade.\r\n\r\nThe Jade Files can also be found under `src/`:\r\n\r\n`src/` <br>\r\n`.. jade/` Jade files<br>\r\n`.... components/` Jade componenten<br>\r\n`.... mixins/` Jade Mixins<br>\r\n`.... templatepart/` Template segments, eg HTML Header<br>\r\n`.... templates/` Different template types<br>\r\n\r\n> The Jade part is more like a little boilerplate. It's up to you how much you want to segment the Jade code.\r\n\r\n---\r\n\r\n## Working with JS Files\r\n\r\n### Internal Files\r\nInternal JS files are in the directory `src/js/` saved, there will be discover `app.js` file - regularly it can be considered sufficient one file.\r\n\r\n> The `app.js` will load in HTML always at the end.\r\n\r\nOnce the default Gulp task is active, all files will be monitored in  `src/js/`, at a change through this one JSHint test and are stored in `dist/assets/js/` (with the same filename).\r\n\r\n### External Files\r\n\r\nLet us turn to the external script files, this can be either [Bower](http://bower.io/) load in the package, if they are not found there, one can integrate over the `scripts` folder.\r\n\r\nIf you want to, for example, Add an additional scripts, you will first search for it - sometimes the packages are stored under a different name.\r\n\r\n```bash\r\nbower search package-name\r\n```\r\n\r\nIf you have the appropriate package found, it is installed with the following command:\r\n\r\n```bash\r\nbower install package-name --save\r\n```\r\n\r\nDas entsprechende Paket wird in `src/stash/bower/` installiert und zusätzlich in der `bower.json` notiert. Möchte man ein installiertes Package wieder deinstallieren:\r\n\r\nThe appropriate package is installed in `src/stash/bower/` and also listed in the `bower.json`. If you want to uninstall an installed package again:\r\n\r\n```bash\r\nbower uninstall package-name --save\r\n```\r\n\r\n> The contents of the `bower` Folders is not transferred to the external Git repo. Developers who work on the project, download the Dependencies Bower over `bower install`. Therefore, it is important to note each dependency in the` bower.json`.\r\n\r\nOf course it can happen that you can not find certain packages via Bower, you can register then either yourself:\r\n\r\n```bash\r\nbower register https://url.to-the.git.repo package-name\r\n```\r\n\r\nOr you can load the package in `src/stash/scripts/` where it is available for further use.\r\n\r\nTo use JS files, they must first be processed with `Gulp`. JS files are then either in the JS directory `dist/assets/js/` copied or they are combined and copied to the JS directory.\r\n\r\nIn the `gulpfile.js` you will find the following block:\r\n\r\n![JS Config in Gulpfile](http://i.imgur.com/OVTiI2k.png)\r\n\r\nEverything was listed under `copyjs` is simply copied, `combinejs` identifies the files to be combined. To activate the process:\r\n\r\n```bash\r\ngulp rebuild-js\r\n```\r\n\r\n> Combined JS files are saved under the filename `scripts.js`\r\n\r\n---\r\n\r\n## Extend Kittn\r\n\r\nKittn is designed to give the developer a skeleton in his hand, with which he can already work. Nevertheless, it will happen that not enough a the default plugins. One or the other would take the native `js` might use `CoffeeScript` might be missing that some other feature.\r\n\r\nTo expand Kittn you should list the new plugins on the `package.json`, as the `node_modules` directory is not transmitted to the git repo.\r\n\r\n```bash\r\nnpm install packagename --save-dev\r\n```\r\n\r\nThis is a package about NPM Network, installed into the project directory and listed in the `package.json`. Thus, the subsequent Developer installed exactly the packages that are needed for the project. It understood then you then the `gulpfile.js` and / or `gruntfile.js` must modify file.\r\n\r\nTo uninstall packages:\r\n\r\n```bash\r\nnpm uninstall packagename --save-dev\r\n```\r\n\r\n---\r\n\r\n## Coding Infos \r\n\r\nClass names that are generated by \"Kittn\", follow the [BEM](http://bem.info/) syntax. BEM is one of the easiest ways to write Oriented CSS object. Surely you can build a lot more delicate with [Smacss](https://smacss.com/), but should not forget that the issue is simply a principle of object-oriented programming here. One should therefore not make a religion out of the topic - the final product will always be CSS with all its drawbacks.\r\n\r\nThe Develeloper is free to decide whether he wants his class named after the BEM build syntax, in which case you can rely on the BEM mixins, thus obtaining a central node to make global modifications to the syntax.\r\n\r\nBy default BEM elements marked with a double underscore `__` and BEM Modifier with a double hyphen `--`. Who does not agree, this may change the Sass Setup file (`src/sass/_setup.scss`) on the by adjusting the `$kittn-bem` Map accordingly.\r\n\r\n--- \r\n\r\n## Sass Framework\r\nThe centerpiece of the toolkit consists of the [Sass](http://sass-lang.com) framework, the toolkit was built more around to replace the missing functions.\r\n\r\n> You not need to worry about CSS3 prefixes the `gulp-autoprefixer` will insert it on any Compile.\r\n\r\n### Structure\r\n\r\nIn the directory `src/sat/` is the Framework:\r\n\r\n`sass/`<br>\r\n`.. framework/` Framework mixins and functions<br>\r\n`.... helper/` Helpers that need to included first<br>\r\n`.... modules/` Mixins, functions and generators<br>\r\n`.... partials/` Predefined snippets<br>\r\n`.. maps/` Extended Data Maps<br>\r\n`.. styles/` Possible place for your own partials<br>\r\n`.. _loader.scss` Loading the files (the order is predetermined)<br>\r\n`.. _setup.scss` The entire configuration<br>\r\n`.. _workfile.scss` The Workfile<br>\r\n`.. style.scss` Build the Stylesheet<br>\r\n`.. style-ie8.scss` Build the Stylesheet for IE8<br>\r\n\r\n> The name for the files `style.scss` may differ if you have specified a different name when you activate the toolkit, as it may be that there is no `xxxxi8.scss` file exists when the IE8 compatibility was turned off.\r\n\r\n---\r\n\r\n### Workfile\r\n\r\n![](http://i.imgur.com/JSwYDZv.jpg)\r\n\r\nWork always with `_workfile.scss` file and the contents of this file into the respective `style.scss` imported and converted by the compiler to a CSS file. We simply open one off the `style.scss` files:\r\n\r\n![](http://i.imgur.com/smb2mSe.png)\r\n\r\nThis file will import the content from the `_workfile`, but filter out this specific content. For example, Contents that are tagged with the variable `old`, will not include here.\r\n\r\nUsing [Jacket](https://github.com/Team-Sass/jacket) the developers to work on a file, route-specific styles on different files.\r\n\r\n> \r\n> In Kittn you work principally with two Jacket variables. `old` marked contents which migrate in IE8 stylesheet and `modern` is intended only for modern browsers. If you want you can of course still expand.\r\n\r\n---\r\n\r\n### Loader\r\n`file: src/sass/_loader.scss`\r\n\r\nWith the `_loader.scss` file, all required files are loaded. The order is already given proof should not be changed.\r\n\r\n---\r\n\r\n### Setup\r\n`file: src/sass/_setup.scss`\r\n\r\nAlmost all settings can be changed and extended over `_setup.scss`.\r\n\r\n`$kittn-global-spacing` Global spacing unit, used for Spacer and Lines Mixins.<br>\r\n`$kittn-default-unit` Default unit for unitless values. Default `px`<br>\r\n`$kittn-bem` BEM Prefixes for Elements and Modifiers<br>\r\n`$kittn-directorys` Kittn Directory Organisation - when you change the structure from `dist/` you need to change here also.<br>\r\n`$kittn-activate` Activate Base Features<br>\r\n`$kittn-sprite` Sprite Configuration<br>\r\n`$kittn-iconfont` Iconfont Configuration<br>\r\n`$kittn-breakpoint-map` Map off all Breakpoints and Behaviors<br>\r\n`$kittn-fontface-map` Load and integrate all FontFaces<br>\r\n`$kittn-typo` Base Typo Setup<br>\r\n`$kittn-active-responsive-fonts` Activates the Responsive Fontsize Generator<br>\r\n`$kittn-typo-margin` Default Margin for Typographic Elements<br>\r\n`$kittn-typo-style` Base Typo and Font Styling<br>\r\n`$kittn-typo-sizes` Base Typo Sizes<br>\r\n`$kittn-global-heading` Global Heading Stylings<br>\r\n`$kittn-typostyles-map` All possible Typostyles in a Map<br>\r\n`$kittn-generate-typostyles` Generate all Fontstyles with classes<br>\r\n`$kittn-color-map` Color Definition Map. This is a collection from all used Colors.<br>\r\n`$kittn-color-generator` Generate the Color Classes from the Color Array<br>\r\n`$kittn-color-route` Route the Colors to the Elements<br>\r\n`$kittn-hairline` Hairline Styling<br>\r\n`$kittn-tables` Table Styling\r\n\r\n---\r\n\r\n### Maps\r\nTo the `file` _setup.scss yet another map coming Files.\r\n\r\n#### Fontstacks\r\n`file: src/sass/maps/_fontstacks.scss`\r\n\r\nFonts that are inserted via the Font-Family mixins can access the fontstack map. In the map, the most common combinations are included.\r\n\r\n#### Iconmap\r\n`file: src/sass/maps/_iconfontlist.scss`\r\n\r\nAlle Icons einer Iconfont werden in diese Map eingetragen - über die Iconfont Mixins werden daraus dann wieder Klassen generiert.\r\n\r\nAll icons from a IconFont be listed in this map - the classes would be generated with the Iconfont mixins.\r\n\r\n> Who created his Iconfonts with Icomoon, a CSS file get delivered. With some Find & Replace can this CSS file easily convert back into a map.\r\n\r\n```scss\r\n$kittn-font-icons: (\r\n  news: '\\e609',\r\n  works: '\\e60a'\r\n);\r\n```\r\n\r\n#### Imagemaps\r\n\r\n`file: src/sass/maps/_imagemap.scss`<br>\r\n`file: src/sass/maps/_sprite.scss`<br>\r\n`file: src/sass/maps/_sprite-retina.scss`\r\n\r\nThese maps are created automatically via `Grunt` tasks. There, data are recorded as the image dimensions, file name, etc.\r\n\r\nThe Image Mixin will access the maps.\r\n\r\n#### Connectmap\r\n`file: src/sass/maps/_connectmap.scss`\r\n\r\nIn the Connectmap repeatable styles will be entered. The map is then read via mixins, which Silent Placeholder be generated. This can be done with `@extend` connected. Alternatively, you can directly import the content as well.\r\n\r\n```scss\r\n$kittn-connect-map: (\r\n  button: (\r\n    height: 30px,\r\n    width: 100%,\r\n    text-align: center\r\n  )\r\n);\r\n```\r\n\r\n#### ZMap\r\n`file: src/sass/maps/_zmap.scss`\r\n\r\nThe different Z-index are listed on the map.\r\n\r\n```scss\r\n$kittn-zlayer-map: (\r\n  'default': 10\r\n);\r\n```\r\n\r\n---\r\n\r\n### Helper\r\n\r\n#### BEM\r\n`file: scr/sass/framework/helper/_bem.scss`\r\n\r\nThis BEM mixins use the prefix set in `$kittn-bem`. Whether you use these mixins or natively write his selectors, is left to the developer.\r\n\r\n##### element <small>(m)</small>\r\nBuild a BEM Element, will add the defined BEM Prefixes.\r\n\r\n- @requires `$kittn-bem`\r\n- @param {*} `$name` - Selector name\r\n\r\n```scss\r\n// Example\r\n.box {\r\n  @include element(element) {\r\n    content: 'the Element';\r\n  }\r\n}\r\n\r\n// Result\r\n.box__element {\r\n  content: 'the Element';\r\n}\r\n```\r\n\r\n##### modifier <small>(m)</small>\r\nBuild a BEM Modifier, with an optional extend functionality\r\n\r\n- @requires `$kittn-bem`\r\n- @param {*} `$name` - The selector name\r\n- @param {bool} `$extend` (false) - If the Modifier need to be extended with parent\r\n\r\n```scss\r\n// Example\r\n.box {\r\n  height: 50px;\r\n  width: 30px;\r\n  @include modifier(round) {\r\n    border-radius: 10px;\r\n  }\r\n}\r\n\r\n.other-box {\r\n  height: 50px;\r\n  width: 30px;\r\n  @include modifier(round, true) { // Extend active\r\n    border-radius: 10px;\r\n  }\r\n}\r\n\r\n// Result\r\n.box {\r\n  height: 50px;\r\n  width: 30px;\r\n}\r\n.box--round {\r\n  border-radius: 10px;\r\n}\r\n\r\n.other-box, .other-box--round {\r\n  height: 50px;\r\n  width: 30px;\r\n}\r\n.other-box--round {\r\n  border-radius: 10px;\r\n}\r\n```\r\n\r\n##### chainroot <small>(m)</small>\r\nSetup the Root Element for the chained Modifers. Must be inserted in a Selector.\r\n\r\n```scss\r\n// Example\r\n.test {\r\n  @include chainroot {\r\n    content: hello;\r\n  }\r\n}\r\n\r\n// Result\r\n.test, [class^=\"test\"] {\r\n  content: hello;\r\n}\r\n```\r\n\r\n##### chain <small>(m)</small>\r\nChain the Modifiers in a more simple way.\r\n\r\n- @requires `$kittn-bem`\r\n- @param {*} `$name` - Selector name\r\n\r\n```scss\r\n// Example\r\n.test {\r\n  @include chainroot {\r\n    font-size: 20px;\r\n    line-height: 24px;\r\n  }\r\n  @include chain(wide) {\r\n    width: 200px;\r\n  }\r\n  @include chain(height) {\r\n    height: 100px;\r\n  }\r\n}\r\n\r\n// Result\r\n.test, [class^=\"test\"] {\r\n  font-size: 20px;\r\n  line-height: 24px;\r\n}\r\n[class^=\"test\"][class*=\"--wide\"] {\r\n  width: 200px;\r\n}\r\n[class^=\"test\"][class*=\"--height\"] {\r\n  height: 100px;\r\n}\r\n```\r\n\r\n```markup\r\n// Usage\r\n<div class=\"test\">...</div>\r\n<div class=\"test--wide\">...</div>\r\n<div class=\"test--height--wide\">...</div>\r\n```\r\n\r\n#### Connect\r\n`file: scr/sass/framework/helper/connect.scss`\r\n\r\nThrough the Connect mixins, it is possible to predefine styles and then to combine these styles either by `@extend` or the style to load directly into the selector (for example if you are staying in a media query).\r\n\r\nIf defined in the `$kittn-connect-map` Map Styles, Silent Selectors are generated.\r\n\r\n##### connect-Gen <small>(m)</small>\r\nThus, the selectors are linked or included directly\r\n\r\n- @access `private`\r\n- @requires `$kittn-connect-map`\r\n- @param {list} `$key` - Tageted Styles, can be more than one\r\n- @param {bool} `$extend` (true) - On `false` the Style will be directly yielded in the selector.\r\n- @param {map} `$map` ($kittn-connect-map) - Connect Map\r\n\r\n##### connect-Yield <small>(m)</small>\r\nThe Mixin generated from the elements of `$kittn-connect-map` Map, Placeholder Selectors. Which are then connected by means of the `connect` mixin with existing classes.\r\n\r\n- @access `private`\r\n- @requires `$kittn-connect-map`\r\n- @param {Map} `$map` ($kittn-connect-map) - Connect Map\r\n\r\n```scss\r\n// Map\r\n// file: src/sass/maps/connectmap.scss\r\n\r\n$kittn-connect-map: (\r\n  size: (\r\n    height: 20px,\r\n    line-height: 20px\r\n  ),\r\n  connect: (\r\n    color: #fff,\r\n    background-color: #000\r\n  )\r\n);\r\n```\r\n\r\n```scss\r\n// Example\r\n@include connect-yield();\r\n\r\n// Result\r\n%test {\r\n  height: 20px;\r\n  line-height: 20px;\r\n}\r\n%connect {\r\n  color: #fff;\r\n  background-color: #000;\r\n}\r\n```\r\n\r\n##### connect <small>(m)</small>\r\nWith the Connect Mixin existing elements with the placeholder can be either connected, or the style can be integrated directly into the element.\r\n\r\n- @requires `$kittn-connect-map`\r\n- @param {list} `$key` - Tageted Styles, can be more than one\r\n- @param {bool} `$extend` (true) - On `false` the Style will be directly yielded in the selector.\r\n- @param {map} `$map` ($kittn-connect-map) - Connect Map\r\n\r\n```scss\r\n// Example\r\n.one-connect {\r\n  @include connect(size);\r\n}\r\n.two-connect {\r\n  @include connect(size connect);\r\n}\r\n.direct-yield {\r\n  @include connect(size connect, false);\r\n}\r\n\r\n// Result\r\n.one-connect, .two-connect {\r\n  height: 20px;\r\n  line-height: 20px;\r\n}\r\n.two-connect {\r\n  color: #fff;\r\n  background-color: #000;\r\n}\r\n.direct-yield {\r\n  height: 20px;\r\n  line-height: 20px;\r\n  color: #fff;\r\n  background-color: #000;\r\n}\r\n```\r\n\r\n#### Fonts\r\n`scr/sass/framework/helper/_fonts.scss`<br>\r\n\r\n##### ff <small>(f)</small>\r\nBy means of the `ff` function, you can pick out a font stack from the map and paste, additionally, you can attach your own Font Families.\r\n\r\n- @requires `$kittn-fontstack-map`\r\n- @param {*} `$family` - FontStack Family\r\n- @param {argList} `$append` - The Fonts that need to be prepended\r\n\r\n```scss\r\n// Example\r\n.font {\r\n  font-family: ff('helvetica');\r\n}\r\n.with-own-font {\r\n  font-family: ff('helvetica', 'gotham', 'interstate');\r\n}\r\n\r\n// Result\r\n.font {\r\n  font-family: \"Helvetica Neue\", Helvetica, Arial, sans-serif;\r\n}\r\n.with-own-font {\r\n  font-family: \"gotham\", \"interstate\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\r\n}\r\n```\r\n\r\n##### font-family <small>(m)</small>\r\nIs more an alias of the FF function, this time as a mixin.\r\n\r\n- @requires `$kittn-fontstack-map`\r\n- @param {*} `$family` - FontStack Family\r\n- @param {argList} `$append` - The Fonts that need to be prepended\r\n\r\n```scss\r\n// Example\r\n.font {\r\n  @include font-family('helvetica');\r\n}\r\n.with-own-font {\r\n  @include font-family('helvetica', 'gotham', 'interstate');\r\n}\r\n\r\n// Result\r\n.font {\r\n  font-family: \"Helvetica Neue\", Helvetica, Arial, sans-serif;\r\n}\r\n.with-own-font {\r\n  font-family: \"gotham\", \"interstate\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\r\n}\r\n```\r\n\r\n##### fontface <small>(m)</small>\r\nThe Mixin generates the Font Faces, added an additional SVG font stack if necessary - on Windows platforms for better font rendering which provides (Firefox, Chrome).\r\n\r\n- @requires `$kittn-directorys`\r\n- @param {*} `$filename` - The Filename of the Fontname\r\n- @param {*} `$fontname` - The Desired Fontname\r\n- @param {*} `$fontweight` (normal) - Fontweight\r\n- @param {*} `$fontstyle` (normal) - Fontstyle\r\n- @param {bool} `$svgoption` (true) - Activate the addition route to the SVG Font\r\n\r\n```scss\r\n// Examples\r\n@include fontface('own-font', $svgoption: false);\r\n\r\n@include fontface('34923234font.com', 'bettername', $svgoption: false);\r\n\r\n@include fontface('own-font');\r\n\r\n// Results\r\n@font-face {\r\n  font-family: \"own-font\";\r\n  src: url(\"/assets/fonts/own-font.eot\");\r\n  src: url(\"/assets/fonts/own-font.eot?#iefix\") format(\"eot\"), url(\"/assets/fonts/own-font.woff\") format(\"woff\"), url(\"/assets/fonts/own-font.ttf\") format(\"truetype\"), url(\"/assets/fonts/own-font.svg#own-font\") format(\"svg\");\r\n  font-weight: normal;\r\n  font-style: normal;\r\n}\r\n\r\n@font-face {\r\n  font-family: \"bettername\";\r\n  src: url(\"/assets/fonts/34923234font.com.eot\");\r\n  src: url(\"/assets/fonts/34923234font.com.eot?#iefix\") format(\"eot\"), url(\"/assets/fonts/34923234font.com.woff\") format(\"woff\"), url(\"/assets/fonts/34923234font.com.ttf\") format(\"truetype\"), url(\"/assets/fonts/34923234font.com.svg#34923234font.com\") format(\"svg\");\r\n  font-weight: normal;\r\n  font-style: normal;\r\n}\r\n\r\n@font-face {\r\n  font-family: \"own-font\";\r\n  src: url(\"/assets/fonts/own-font.eot\");\r\n  src: url(\"/assets/fonts/own-font.eot?#iefix\") format(\"eot\"), url(\"/assets/fonts/own-font.woff\") format(\"woff\"), url(\"/assets/fonts/own-font.ttf\") format(\"truetype\"), url(\"/assets/fonts/own-font.svg#own-font\") format(\"svg\");\r\n  font-weight: normal;\r\n  font-style: normal;\r\n}\r\n@media screen and (-webkit-min-device-pixel-ratio: 0) {\r\n  @font-face {\r\n    font-family: \"own-font\";\r\n    src: url(\"/assets/fonts/own-font.svg\") format(\"svg\");\r\n    font-weight: normal;\r\n    font-style: normal;\r\n  }\r\n}\r\n```\r\n\r\n##### fontface-generator <small>(m)</small>\r\nDer Generator generiert über die `$kittn-fontface-map` Map eine Reihe von Fontfaces. Der Generator steht fast am Anfang, Fontfaces werden im CSS immer an erster Stelle implementiert.\r\n\r\n- @access `private`\r\n- @requires `$kittn-fontface-map`\r\n\r\n```scss\r\n// Map\r\n// file: src/sass/setup.scss\r\n\r\n$kittn-fontface-map: (\r\n  'ownfont': (\r\n    filename: false,\r\n    weight: normal,\r\n    style: normal,\r\n    svgoption: false\r\n  )\r\n);\r\n```\r\n\r\n```scss\r\n// Example\r\n@include fontface-generator();\r\n\r\n// Result\r\n@font-face {\r\n  font-family: \"ownfont\";\r\n  src: url(\"/assets/fonts/ownfont.eot\");\r\n  src: url(\"/assets/fonts/ownfont.eot?#iefix\") format(\"eot\"), url(\"/assets/fonts/ownfont.woff\") format(\"woff\"), url(\"/assets/fonts/ownfont.ttf\") format(\"truetype\"), url(\"/assets/fonts/ownfont.svg#ownfont\") format(\"svg\");\r\n  font-weight: normal;\r\n  font-style: normal;\r\n}\r\n```\r\n\r\n#### Helper\r\n`file: scr/sass/framework/helper/_helper.scss`\r\n\r\n##### strip-units <small>(f)</small>\r\nRemoves units from values.\r\n\r\n- @param {Number} `$number` - Value\r\n- @returns {Number}\r\n\r\n```scss\r\n// Example\r\n$size: 20px;\r\n\r\n.test {\r\n  height: strip-units($size);\r\n}\r\n\r\n// Result\r\n.test {\r\n  height: 20;\r\n}\r\n```\r\n\r\n##### unit-check <small>(f)</small>\r\nAdds the default Unit of unitless values ​​to.\r\n\r\n- @requires `$kittn-default-unit`\r\n- @param {Number} `$number` - Value\r\n- @returns {Number}\r\n\r\n```scss\r\n// Example\r\n$size: 20;\r\n\r\n.test {\r\n  height: unit-check($size);\r\n}\r\n\r\n// Result\r\n.test {\r\n  height: 20px;\r\n}\r\n```\r\n\r\n##### calc <small>(m)</small>\r\nTo use the CSS Cross-browser function Calc (because in this case the Autoprefixer is not active), is aided by the with the mixin.\r\n\r\n- @param {*} `$property` - Property that calculated\r\n- @param {*} `$expression` - Formula (need to be quoted)\r\n\r\n```scss\r\n// Example\r\n.test {\r\n  @include calc(width, '10% + 20px');\r\n  @include calc(height, '20px + 0.5rem');\r\n}\r\n\r\n// Result\r\n.test {\r\n  width: calc(10% + 20px);\r\n  height: calc(20px + 0.5rem);\r\n}\r\n```\r\n\r\n##### clamp <small>(f)</small>\r\nWith this function you limited numbers.\r\n\r\n- @param {Number} `$value` - The Value that need to be clamped\r\n- @param {Number} `$min` - The posible minimal value\r\n- @param {Number} `$max` - The possible max Value\r\n- @returns {Number} - Clamped Value\r\n\r\n```scss\r\n// Example\r\n$height: 200;\r\n$width: 23;\r\n\r\n.test {\r\n  height: clamp($height, 0, 100) + 0px;\r\n  width: clamp($width, 0, 100) + 0px;\r\n}\r\n\r\n// Result\r\n.test {\r\n  height: 100px;\r\n  width: 23px;\r\n}\r\n\r\n```\r\n\r\n##### cp <small>(f)</small>\r\nThe Color Picker is connected to the Color Map (`$kittn-color-map`) and brings with it the corresponding color values​​.\r\n\r\n> The keywords of the colors must be quoted.\r\n\r\n- @requires `$kittn-color-map`\r\n- @param {*} `$target` - Desired color\r\n- @param {Map} `$map` - Color Map\r\n- @returns {Color}\r\n\r\n```scss\r\n// Example\r\n.color {\r\n  color: cp('primary');\r\n  background-color: cp('black');\r\n}\r\n\r\n// Result\r\n.color {\r\n  color: #f29300;\r\n  background-color: #3c3c3c;\r\n}\r\n```\r\n\r\n##### spacer <small>(f)</small>\r\nThe spacer Mixin generated using the Global-spacing-unit sizes\r\n\r\n- @requires `$kittn-global-spacing`\r\n- @param {Number} `$lines` - Multiplicator for Spacing\r\n- @param {Bool} `$hard` (false) - For including an `!important`\r\n- @param {Number} `$size` ($kittn-global-spacing) - Connection to the Base Spacing\r\n\r\n```scss\r\n// Example\r\n.box {\r\n  height: spacer(2);\r\n  width: spacer(1);\r\n  margin-top: spacer(.25, true);\r\n}\r\n\r\n// Result\r\n.color {\r\n  height: 40px;\r\n  width: 20px;\r\n  margin-top: 5px !important;\r\n}\r\n```\r\n\r\n##### s <small>(f)</small>\r\nThe same as above, this feature by default integrated with the difference no units. Often used for internal mixins.\r\n\r\n- @requires `$kittn-global-spacing`\r\n- @param {Number} `$lines` - Multiplicator for Spacing\r\n- @param {Bool} `$imp` (false) - For including an !important\r\n- @param {*} `$u` (false) - Unit\r\n- @param {Number} `$size` ($kittn-global-spacing) - Connection to the Base Spacing\r\n- @returns {Number}\r\n\r\n```scss\r\n// Example\r\n.box {\r\n  height: s(2, $u: r);\r\n  width: s(1, $u: p);\r\n  margin-top: s(.25, true, p);\r\n  padding-left: s(10) + 0px;\r\n}\r\n\r\n// Result\r\n.box {\r\n  height: 40rem;\r\n  width: 20px;\r\n  margin-top: 5px !important;\r\n  padding-left: 200px;\r\n}\r\n```\r\n\r\n#### Typechecks\r\n`file: scr/sass/framework/helper/_typechecks.scss`\r\n\r\n##### is-true <small>(f)</small>\r\nChecks whether a value was passed\r\n\r\n- @param {*} `$value` - Value to check\r\n- @returns {Bool}\r\n\r\n```scss\r\n// Example\r\n$check: 1;\r\n\r\n.test {\r\n  @if is-true($check) {\r\n    content: 'Treffer';\r\n  }\r\n}\r\n\r\n// Result\r\n.test {\r\n  content: 'True';\r\n}\r\n```\r\n\r\n##### is-map <small>(f)</small>\r\nChecks if it is a map.\r\n\r\n- @param {*} `$value` - Value to check\r\n- @returns {Bool}\r\n\r\n```scss\r\n// Example\r\n$check: (\r\n  1: 'hello'\r\n);\r\n\r\n.test {\r\n  @if is-map($check) {\r\n    content: 'True';\r\n  }\r\n}\r\n\r\n// Result\r\n.test {\r\n  content: 'True';\r\n}\r\n```\r\n\r\n##### is-list <small>(f)</small>\r\nChecks if there is a list.\r\n\r\n- @param {*} `$value` - Value to check\r\n- @returns {Bool}\r\n\r\n```scss\r\n// Example\r\n$check: 'hello' 'welcome' 'to';\r\n\r\n.test {\r\n  @if is-list($check) {\r\n    content: 'True';\r\n  }\r\n}\r\n\r\n// Result\r\n.test {\r\n  content: 'True';\r\n}\r\n```\r\n\r\n##### is-number <small>(f)</small>\r\nChecks if there is a number.\r\n\r\n- @param {*} `$value` - Value to check\r\n- @returns {Bool}\r\n\r\n```scss\r\n// Example\r\n$check: 1;\r\n\r\n.test {\r\n  @if is-number($check) {\r\n    content: 'True';\r\n  }\r\n}\r\n\r\n// Result\r\n.test {\r\n  content: 'True';\r\n}\r\n```\r\n\r\n##### is-string <small>(f)</small>\r\nChecks if it is a string.\r\n\r\n- @param {*} `$value` - Value to check\r\n- @returns {Bool}\r\n\r\n```scss\r\n// Example\r\n$check: 'hello';\r\n\r\n.test {\r\n  @if is-string($check) {\r\n    content: 'True';\r\n  }\r\n}\r\n\r\n// Result\r\n.test {\r\n  content: 'True';\r\n}\r\n```\r\n\r\n##### is-not-string <small>(f)</small>\r\nChecks whether it is **not** a String.\r\n\r\n- @param {*} `$value` - Value to check\r\n- @returns {Bool}\r\n\r\n```scss\r\n// Example\r\n$check: 1;\r\n\r\n.test {\r\n  @if is-not-string($check) {\r\n    content: 'True';\r\n  }\r\n}\r\n\r\n// Result\r\n.test {\r\n  content: 'True';\r\n}\r\n```\r\n\r\n##### is-nested <small>(f)</small>\r\nChecks if the selector has been nested.\r\n\r\n- @returns {Bool}\r\n\r\n```scss\r\n// Example\r\n.test {\r\n  @if is-nested() {\r\n    content: 'True';\r\n  }\r\n}\r\n\r\n.other-test {\r\n  .other-inner {\r\n    @if is-nested() {\r\n      content: 'True';\r\n    }\r\n  }\r\n}\r\n\r\n// Result\r\n.other-test .other-inner {\r\n  content: 'True';\r\n}\r\n```\r\n\r\n##### map-filled <small>(f)</small>\r\nChecks whether the map was filled.\r\n\r\n- @param {*} `$value` - Value to check\r\n- @returns {Bool}\r\n\r\n```scss\r\n// Example\r\n$test-1: ();\r\n$test-2: (\r\n  1: 2,\r\n  3: 4\r\n);\r\n\r\n.test-1 {\r\n  @if map-filled($test-1) {\r\n    content: 'True';\r\n  }\r\n}\r\n.test-2 {\r\n  @if map-filled($test-2) {\r\n    content: 'True';\r\n  }\r\n}\r\n\r\n// Result\r\n.test-2 {\r\n  content: 'True';\r\n}\r\n```\r\n\r\n#### Jacket\r\n`file: scr/sass/framework/helper/_jacket.scss`\r\n\r\nUsing [Jacket](https://github.com/Team-Sass/jacket), specific styles are redirected to corresponding CSS files. Some \"Kittn\" mixins make it more use, for example, the REM function. While modern browsers get a stylesheet with REM values​​, consists in IE8 stylesheet only pixel values\r\n\r\n```scss\r\n@mixin _color($target, $attrib: color, $imp: false, $map: $kittn-color-map) {\r\n\r\n    // Check if the Color have an opacity value\r\n    // Generate RGBA Colors with an IE8 Fallback (hex)\r\n    @if map-get($colors,opacity) != false {\r\n\r\n      // Generate the IE8 Fallback Colors\r\n      @include jacket(old) {\r\n        #{$attrib}: map-get($colors,color) if($imp, !important, null);\r\n      }\r\n\r\n      // Generate RGBA Colors\r\n      @include jacket(modern) {\r\n        #{$attrib}: rgba(map-get($colors,color),map-get($colors,opacity)) if($imp, !important, null);\r\n      }\r\n    }\r\n}\r\n```\r\n\r\nIn the example above you can see the shortened version of the `_color` mixin. In the case of Transparent colors, IE8 (`old`) supplied with hex colors, modern browser (`modern`), such as Chrome will receive an RGBA color.\r\n\r\nWho can naturally wants to build yet more routes. For example, to conduct specific styles for Android in a separate CSS file, you create a new 'style' file. In that case, we call them `android.scss` that should be stored in the `src/sat/` directory.\r\n\r\nThe file has to be prepared in accordance with:\r\n\r\n```scss\r\n// file: src/sass/android.scss\r\n$jacket: 'android';\r\n\r\n@import '_workfile';\r\n```\r\n\r\nOnce the compiler has done its work, in the `dist/assets/css/` directory a new CSS file is show up (`android.css`). You will find there is only the general styles that have not been routed with `old` or `modern`.\r\n\r\nSince `jacket` also allows multiple routes at the same time, you can also mix styles:\r\n\r\n```scss\r\n@mixin myMixin() {\r\n  // Styles for modern browsers and android\r\n  @include jacket(modern, android) {\r\n    ...\r\n  }\r\n}\r\n```\r\n\r\nThus Styles run in the `android` and `modern` Style Sheets.\r\n\r\nFor more [information](https://github.com/Team-Sass/jacket).\r\n\r\n#### Sassylists\r\n`file: scr/sass/framework/helper/_sassylists.scss`\r\n\r\nSince \"kittn\" only a fraction of the functions of Hugo Giraudels [sassylists](http://sassylists.com/) needed, the Library is integrated here in abridged form.\r\n\r\nThe following functionality was integrated:\r\n\r\n- `sl-has-multiple-values`\r\n- `sl-str-compare`\r\n- `sl-to-list`\r\n- `sl-listify`\r\n- `sl-reverse`\r\n- `sl-mirror`\r\n- `sl-remove-duplicates`\r\n- `sl-unique`\r\n- `sl-sort`\r\n- `sl-order`\r\n\r\n#### Debug\r\n`file: scr/sass/framework/helper/_debug.scss`\r\n\r\nWhen activating potential errors in the CSS code will be highlighted visually.\r\n\r\n`rot` = Error<br>\r\n`gelb` = To Check\r\n\r\n- @requires '$kittn-activate'\r\n\r\n---\r\n\r\n### Modules\r\n\r\n#### Breakpoints\r\n`file: scr/sass/framework/modules/_breakpoints.scss`\r\n\r\n##### bp <small>(f)</small>\r\nSelects the basis of the breakpoint-Key, the corresponding size of the breakpoint map.\r\n\r\n- @requires `$kittn-breakpoint-map`\r\n- @param {*} `$target` - The required Breakpoint\r\n- @param {Map} `$entrys` ($kittn-breakpoint-map) - Connection to the Breakpoint Map\r\n- @returns {Number}\r\n\r\n```scss\r\n// Example\r\n.test {\r\n  content: bp(1);\r\n}\r\n\r\n// Result\r\n.test {\r\n  content: 320px;\r\n}\r\n```\r\n\r\n##### break <small>(m)</small>\r\nGenerates MediaQueries. If mobile-first has been activated (`$kittn-activate`), the MQ always work by default with `min` values. In the mode `between` is the mixin the two sizes also always always ascending sort.\r\n\r\n- @requires `$kittn-breakpoint-map`, `$kittn-activate`\r\n- @param {*} `$target` - Required Breakpoint\r\n- @param {*} `$mode` - Media Query Mode. Values: `between`, `max`, `min`, `auto` (default - setup with mobile-first:true/false)\r\n- @param {Map} `$list` ($kittn-breakpoint-map) - Connection to the Breakpoint Map\r\n\r\n```scss\r\n// Example\r\n.test {\r\n  height: 200px;\r\n\r\n  @include break(2) {\r\n    height: 400px;\r\n  }\r\n}\r\n\r\n.other-dir {\r\n  @include break(3,max) {\r\n    height: 200px;\r\n  }\r\n}\r\n.between {\r\n  @include break(2 4, between) {\r\n    display: block;\r\n  }\r\n}\r\n\r\n.sort {\r\n  @include break(5 2, between) {\r\n    display: block;\r\n  }\r\n}\r\n\r\n// Result\r\n.test {\r\n  height: 200px;\r\n}\r\n@media screen and (min-width: 480px) {\r\n  .test {\r\n    height: 400px;\r\n  }\r\n}\r\n\r\n@media screen and (max-width: 561px) {\r\n  .other-dir {\r\n    height: 200px;\r\n  }\r\n}\r\n\r\n@media screen and (min-width: 480px) and (max-width: 769px) {\r\n  .between {\r\n    display: block;\r\n  }\r\n}\r\n\r\n@media screen and (min-width: 480px) and (max-width: 961px) {\r\n  .sort {\r\n    display: block;\r\n  }\r\n}\r\n```\r\n\r\n##### eq <small>(m)</small>\r\nMixin for the [ElementQueries](https://github.com/snugug/eq.js) Script.\r\n\r\n- @param {argList} $states - The Different Querie Types\r\n\r\n```scss\r\n// Example\r\n.test {\r\n  @include eq('small', 'medium', 'large') {\r\n    color: red;\r\n  }\r\n\r\n  @include eq('small') {\r\n    p {\r\n      height: 20px;\r\n    }\r\n  }\r\n}\r\n\r\n// Result\r\n.test[data-eq-state=\"small\"],\r\n.test[data-eq-state=\"medium\"],\r\n.test[data-eq-state=\"large\"] {\r\n  color: red;\r\n}\r\n.test[data-eq-state=\"small\"] p {\r\n  height: 20px;\r\n}\r\n\r\n// Usage\r\n<div data-eq-pts=\"small: 480, medium: 700, large: 800\" class=\"test\">\r\n  <p>Test Block</p>\r\n</div>\r\n```\r\n\r\n##### visibility <small>(m)</small>\r\nGenerates Visibilty / Hidden Classes based on the `$kittn-breakpoint-map` Map. However, there are only generated classes if they were entered in the map with `visibility: true`.\r\n\r\n- @requires `$kittn-breakpoint-map`\r\n\r\n```scss\r\n// Map\r\n$kittn-breakpoint-map: (\r\n  1: (\r\n    size: 320px,\r\n    visibility: true,\r\n    step: true,\r\n    fontsize: false\r\n  ),\r\n  2: (\r\n    size: 480px,\r\n    visibility: false,\r\n    step: false,\r\n    fontsize: 80\r\n  )\r\n);\r\n```\r\n\r\n```scss\r\n// Example\r\n@include visibility;\r\n\r\n// Result\r\n.hidden-to--1 {\r\n  display: none;\r\n}\r\n@media screen and (max-width: 321px) {\r\n  .hidden-to--1 {\r\n    display: inherit;\r\n  }\r\n}\r\n\r\n@media screen and (min-width: 320px) {\r\n  .hidden-from--1 {\r\n    display: none;\r\n  }\r\n}\r\n\r\n@media screen and (max-width: 321px) {\r\n  .visible-to--1 {\r\n    display: none;\r\n  }\r\n}\r\n\r\n.visible-from--1 {\r\n  display: none;\r\n}\r\n@media screen and (min-width: 320px) {\r\n  .visible-from--1 {\r\n    display: inherit;\r\n  }\r\n}\r\n```\r\n\r\n#### Colors\r\n`file: scr/sass/framework/modules/_color.scss`<br>\r\n\r\n##### tint <small>(f)</small>\r\nMix a color with a white.\r\n\r\n- @param {Color} `$color` - The Color value\r\n- @param {Number} `$amount` - The Mix Value\r\n- @param {color} `$tint-color` (#fff) - Mix Color\r\n- @returns {Color}\r\n\r\n```scss\r\n// Example\r\n.color {\r\n  color: tint(#ff0000,20);\r\n}\r\n\r\n// Result\r\n.color {\r\n  color: #ff3333;\r\n}\r\n```\r\n\r\n##### shade <small>(f)</small>\r\nMix a color with black.\r\n\r\n- @param {Color} `$color` - The Color value\r\n- @param {Number} `$amount` - The Mix Value\r\n- @param {color} `$shade-color` (#000) - Mix Color\r\n- @returns {Color}\r\n\r\n```scss\r\n// Example\r\n.color {\r\n  color: shade(#ff0000,20);\r\n}\r\n\r\n// Result\r\n.color {\r\n  color: #cc0000;\r\n}\r\n```\r\n\r\n##### luma <small>(f)</small>\r\nCalculates the brightness of a color.\r\n\r\n- @param {Color} `$color` - Color Value\r\n- @returns {Number}\r\n\r\n```scss\r\n// Example\r\n$color: red;\r\n\r\n.color {\r\n  content: luma($color);\r\n}\r\n\r\n// Result\r\n.color {\r\n  content: 76.245;\r\n}\r\n```\r\n\r\n##### luma-gte <small>(f)</small>\r\nReturns `true` back when color is brighter than 1 color 2\r\n\r\n- @param {Color} `$color1` - Color Value\r\n- @param {Color} `$color2` - Color Value\r\n- @returns {Bool}\r\n\r\n```scss\r\n// Example\r\n$color-1: red;\r\n$color-2: blue;\r\n\r\n.color {\r\n  @if luma-gte($color-1, $color-2) {\r\n    content: 'true'\r\n  }\r\n}\r\n\r\n// Result\r\n.color {\r\n  content: \"true\";\r\n}\r\n```\r\n\r\n##### luma-lte <small>(f)</small>\r\nReturns `true` back if color1 is brighter than color2\r\n\r\n- @param {Color} `$color1` - Color Value\r\n- @param {Color} `$color2` - Color Value\r\n- @returns {Bool}\r\n\r\n```scss\r\n// Example\r\n$color-1: red;\r\n$color-2: blue;\r\n\r\n.color {\r\n  @if luma-lte($color-1, $color-2) {\r\n    content: 'true'\r\n  }\r\n}\r\n```\r\n\r\n##### luma-diff <small>(f)</small>\r\nCalculates the difference between between two color values.\r\n\r\n- @param {Color} `$color1` - Color Value\r\n- @param {Color} `$color2` - Color Value\r\n- @returns {Bool}\r\n\r\n```scss\r\n// Example\r\n$color-1: red;\r\n$color-2: blue;\r\n\r\n.color {\r\n  content: luma-diff($color-1, $color-2);\r\n}\r\n\r\n// Result\r\n.color {\r\n  content: 47.175;\r\n}\r\n```\r\n\r\n##### _color <small>(m)</small>_\r\nTaking values ​​from the Color Map. In the mixin a fallback for IE is integrated as well - if colors have opacity values​​.\r\n\r\n- @access private\r\n- @requires `$kittn-color-map`\r\n- @param {*} `$target` - Color Key from Map\r\n- @param {*} `$attrib` (color) - The Color Attribute\r\n- @param {Bool} `$imp` (false) - For !important setting\r\n- @param {Map} `$map` (stylecolors) - Color Map\r\n\r\n```scss\r\n// Example\r\n.color {\r\n  @include _color('primary');\r\n  @include _color('black', background-color);\r\n}\r\n\r\n// Result\r\n.color {\r\n  color: #f29300;\r\n  background-color: #3c3c3c;\r\n}\r\n```\r\n\r\n##### get-c <small>(m)</small>\r\nConstructed from the selected color value the text color.\r\n\r\n- @requires `$kittn-color-map`\r\n- @param {*} `$target` - The Color Key\r\n- @param {Bool} `$hard`- For !important setting\r\n\r\n```scss\r\n// Example\r\n.color {\r\n  @include get-c('primary');\r\n}\r\n\r\n// Result\r\n.color {\r\n  color: #f29300;\r\n}\r\n```\r\n\r\n##### color <small>(m)</small>\r\nAlias Mixin from `get-c` mixin\r\n\r\n##### get-bc <small>(m)</small>\r\nConstructed from the selected color value, the background color\r\n\r\n- @requires `$kittn-color-map`\r\n- @param {*} `$target` - The Color Key\r\n- @param {Bool} `$hard`- For !important setting\r\n\r\n```scss\r\n// Example\r\n.color {\r\n  @include get-bc('primary');\r\n}\r\n\r\n// Result\r\n.color {\r\n  background-color: #f29300;\r\n}\r\n```\r\n\r\n##### background-color <small>(m)</small>\r\nAlias Mixin from `get-bc`\r\n\r\n##### colorgenerator <small>(m)</small>\r\nGenerated from the `$kittn-color-map` Map color classes, either `silent` or as a `class`. In the `$ kittn-color generator` you will find the necessary settings.\r\n\r\n- @access private\r\n- @requires `$kittn-color-map`, `$kittn-color-generator`\r\n- @type {Map} `$colors` ($kittn-color-map) - The map to embed\r\n\r\n```scss\r\n// Map\r\n$kittn-color-map: (\r\n  'primary': (\r\n    color: #f29300,\r\n    opacity: false,\r\n    type: bc\r\n  ),\r\n  'black': (\r\n    color: #3c3c3c,\r\n    opacity: false,\r\n    type: bc\r\n  )\r\n);\r\n```\r\n\r\nWith `type` one determines the type of Color Placeholder:\r\n\r\n- `c` Color\r\n- `b` Background-Color\r\n- `bc` Background-Color & Color\r\n\r\n```scss\r\n// Example\r\n@include colorgenerator();\r\n\r\n// Result\r\n.c--primary {\r\n  color: #f29300;\r\n}\r\n.bc--primary {\r\n  background-color: #f29300;\r\n}\r\n.c--black {\r\n  color: #3c3c3c;\r\n}\r\n.bc--black {\r\n  background-color: #3c3c3c;\r\n}\r\n```\r\n\r\n##### ext-c <small>(m)</small>\r\nCombines elements with the selected color (`color`) - but the Colorgenerator must have generates the Color Placeholder, otherwise the mixin loads the color directly into the element.\r\n\r\n- @requires `$kittn-color-generator`\r\n- @param {*} `$name` - Color Key\r\n\r\n```scss\r\n// Example\r\n.first {\r\n  @include ext-c('primary');\r\n}\r\n.second {\r\n  @include ext-c('primary');\r\n}\r\n\r\n// Result\r\n.first, .second {\r\n  color: #f29300;\r\n}\r\n```\r\n\r\n##### ext-bc <small>(m)</small>\r\nCombines elements with the selected color (`background-color`) - but the Colorgenerator must have generates the Color Placeholder, otherwise the mixin loads the color directly into the element.\r\n\r\n- @requires `$kittn-color-generator`\r\n- @param {*} `$name` - Color Key\r\n\r\n```scss\r\n// Example\r\n.first {\r\n  @include ext-bc('primary');\r\n}\r\n.second {\r\n  @include Ext-bc('primary');\r\n}\r\n\r\n// Result\r\n.first, .second {\r\n  background-color: #f29300;\r\n}\r\n```\r\n\r\n#### Dimensions\r\n`file: scr/sass/framework/modules/_dimensions.scss`<br>\r\n\r\n##### size <small>(m)</small>\r\nSets the size of an element.\r\n\r\n- @param {List} `$size` - Size can be includes with a Single Value (square) or with two value `width` & `height` \r\n- @param {Bool} `$lineheight` (false) - On `true` lineheight will be set to the same $size, otherwise use a Number\r\n\r\n```scss\r\n// Example\r\n.square {\r\n  @include size(50);\r\n}\r\n.rectangle {\r\n  @include size(50 100);\r\n}\r\n.with-lineheight {\r\n  @include size(50,true);\r\n}\r\n.with-individual-lineheight {\r\n  @include size(50,80);\r\n}\r\n\r\n// Result\r\n.square {\r\n  width: 50px;\r\n  height: 50px;\r\n}\r\n.rectangle {\r\n  width: 50px;\r\n  height: 100px;\r\n}\r\n.with-lineheight {\r\n  width: 50px;\r\n  height: 50px;\r\n  line-height: 50px;\r\n}\r\n.with-individual-lineheight {\r\n  width: 50px;\r\n  height: 50px;\r\n  line-height: 80px;\r\n}\r\n```\r\n\r\n##### align-height <small>(m)</small>\r\nShorthand to setup `height` and `line-height` with one value.\r\n\r\n- @param {Number} `$height` - Heightvalue\r\n- @param {Number} `$factor` - The multiply factor\r\n\r\n```scss\r\n// Example\r\n.height {\r\n  @include align-height(50);\r\n}\r\n.height-different-factor {\r\n  @include align-height(50,1.5);\r\n}\r\n\r\n// Result\r\n.height {\r\n  height: 50px;\r\n  line-height: 50px;\r\n}\r\n.height-different-factor {\r\n  height: 50px;\r\n  line-height: 75px;\r\n}\r\n```\r\n\r\n##### align-fontsize <small>(m)</small>\r\nShorthand to setup `font-size` and `line-height` with one value.\r\n\r\n- @param {Number} `$size` - Fontsize\r\n- @param {Number} `$factor` - The multiply factor\r\n\r\n```scss\r\n// Example\r\n.font {\r\n  @include align-fontsize(20);\r\n}\r\n.font-other-factor {\r\n  @include align-fontsize(20,0.8);\r\n}\r\n\r\n// Result\r\n.font {\r\n  font-size: 20px;\r\n  line-height: 24px;\r\n}\r\n.font-other-factor {\r\n  font-size: 20px;\r\n  line-height: 16px;\r\n}\r\n```\r\n\r\n##### center <small>(m)</small>\r\nCentered, averages and gives an element size\r\n\r\n- @param {List} `$size` - Dimensions\r\n\r\n```scss\r\n// Example\r\n.box {\r\n  @include center(20);\r\n}\r\n.box2 {\r\n  @include center(20 50);\r\n}\r\n\r\n// Result\r\n.box {\r\n  width: 20px;\r\n  height: 20px;\r\n  line-height: 20px;\r\n  text-align: center;\r\n}\r\n\r\n.box2 {\r\n  width: 20px;\r\n  height: 50px;\r\n  line-height: 50px;\r\n  text-align: center;\r\n}\r\n```\r\n\r\n##### perfect-circle <small>(m)</small>\r\nAdjusts the Border-radius on the size of the element.\r\n\r\n- @param {Number} `$size` - The Size of the Circle\r\n\r\n```scss\r\n// Example\r\n.circle {\r\n  @include perfect-circle(20);\r\n}\r\n\r\n// Result\r\n.circle {\r\n  width: 20px;\r\n  height: 20px;\r\n  line-height: 20px;\r\n  text-align: center;\r\n  border-radius: 20px;\r\n}\r\n```\r\n\r\n##### ratio <small>(m)</small>\r\nSets the width and height of an element in a relationship, which scale elements such as images.\r\n \r\n- @param {list} `$ratio` (1) - Ratio between width and height\r\n- @param {string} `$selector` (false) - Target selector\r\n\r\n```scss\r\n// Example\r\n.ratio {\r\n  @include ratio(16 9);\r\n}\r\n.box {\r\n  @include ratio(16 9, '.box__inner');\r\n}\r\n\r\n// Result\r\n.ratio {\r\n  overflow: hidden;\r\n  position: relative;\r\n}\r\n.ratio:before {\r\n  content: '';\r\n  display: block;\r\n  height: 0;\r\n  padding-top: 56.25%;\r\n}\r\n.ratio > * {\r\n  position: absolute;\r\n  left: 0;\r\n  top: 0;\r\n  height: 100%;\r\n  width: 100%;\r\n}\r\n.box {\r\n  overflow: hidden;\r\n  position: relative;\r\n}\r\n.box:before {\r\n  content: '';\r\n  display: block;\r\n  height: 0;\r\n  padding-top: 56.25%;\r\n}\r\n.box > .box__inner {\r\n  position: absolute;\r\n  left: 0;\r\n  top: 0;\r\n  height: 100%;\r\n  width: 100%;\r\n}\r\n```\r\n\r\n##### unratio <small>(m)</small>\r\nRemoves the set ratio\r\n\r\n- @param {string} `$selector` (false) - Target selector\r\n\r\n```scss\r\n// Example\r\n.box {\r\n  @include unratio('.box__inner');\r\n}\r\n\r\n// Result\r\n.box:before {\r\n  height: auto;\r\n  padding-top: 0;\r\n}\r\n.box > .box__inner {\r\n  position: inherit;\r\n  left: inherit;\r\n  top: inherit;\r\n  height: inherit;\r\n  width: inherit;\r\n}\r\n```\r\n\r\n##### tighten-up <small>(m)</small>\r\nThe element spreads to the same dimension of the outer container.\r\n\r\n```scss\r\n// Example\r\n.box {\r\n  @include tighten-up;\r\n}\r\n\r\n// Result\r\n.box {\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  right: 0;\r\n  bottom: 0;\r\n}\r\n```\r\n\r\n##### text-middle <small>(m)</small>\r\nText elements positioned at the vertical center.\r\n\r\n```scss\r\n// Example\r\n.middle {\r\n  @include text-middle;\r\n}\r\n\r\n// Result\r\n.middle:before {\r\n  content: '';\r\n  display: inline-block;\r\n  height: 100%;\r\n  vertical-align: middle;\r\n  }\r\n.middle > * {\r\n  display: inline-block;\r\n  vertical-align: middle;\r\n}\r\n```\r\n\r\n#### Grid\r\n`file: scr/sass/framework/modules/_grid.scss`\r\n\r\n##### grid-size <small>(f)</small>\r\nCalculates the width of the Colum\r\n\r\n- @param {Number} `$colums` - Colums\r\n- @param {Number} `$maxColums` - Max Colums\r\n- @returns {Number} - Percentage Value\r\n\r\n```scss\r\n// Example\r\n.box {\r\n  width: grid-size(3);\r\n}\r\n\r\n// Result\r\n.box {\r\n  width: 25%;\r\n}\r\n```\r\n\r\n##### grid-adaptive <small>(m)</small>\r\nThe page width is changed adaptive. The respective threshold is set via the `$ kittn-breakPoint map Map` by providing at Breakpoint `step` to `true`. The order of MediaQueries depends on `$kittn-activate(mobile-first)`.\r\n\r\n_The Mixin 'must be called in a selector._\r\n\r\n- @requires `$kittn-breakpoint-map`\r\n\r\n```scss\r\n// Map\r\n// file: src/sass/setup.scss\r\n$kittn-breakpoint-map: (\r\n  1: (\r\n    size: 320px,\r\n    visibility: true,\r\n    step: true, // Trigger for 'grid-adaptive'\r\n    fontsize: false\r\n  ),\r\n  2: (\r\n    size: 480px,\r\n    visibility: false,\r\n    step: false, // Trigger for 'grid-adaptive'\r\n    fontsize: 80\r\n  ),\r\n  3: (\r\n    size: 560px,\r\n    visibility: false,\r\n    step: true, // Trigger for 'grid-adaptive'\r\n    fontsize: false\r\n  )\r\n);\r\n```\r\n\r\n```scss\r\n// Example\r\n.container {\r\n  @include grid-adaptive();\r\n}\r\n\r\n// Result\r\n.container {\r\n  width: 320px;\r\n}\r\n@media screen and (min-width: 560px) {\r\n  .container {\r\n    width: 560px;\r\n  }\r\n}\r\n```\r\n\r\n##### grid-container <small>(m)</small>\r\nGenerates the container sides, so that the position (default: center) and width of the page is determined\r\n\r\nIf you use the `grid-adaptive` mixin, the page width should be disabled.\r\n\r\n- @param {Map} `$container`\r\n  - {List|Bool} `width` - With one Value the container is static, two values ​​specify min and max, can also be set to `false`\r\n  - {*} `pos` - Position. Values: `center`, `left`,  `right`\r\n  - {Number} `gutter` - Active only if `pos: left` or `pos: right` is set, the Gutter then determines the distance to the viewport\r\n  - {Bool} `static-ie` - When enabled, IE8 gets a static page container\r\n\r\n```scss\r\n// Example\r\n.container-adaptive {\r\n  @include grid-stepper();\r\n  @include grid-container((\r\n      width: false\r\n  ));\r\n}\r\n\r\n.container-fluid {\r\n  @include grid-container((\r\n      width: 400 900\r\n  ));\r\n}\r\n\r\n.container-static {\r\n  @include grid-container((\r\n      width: 800\r\n  ));\r\n}\r\n\r\n// Result\r\n.container-adaptive {\r\n  width: 320px;\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  padding-left: 10px;\r\n  padding-right: 10px;\r\n}\r\n@media screen and (min-width: 560px) {\r\n  .container-adaptive {\r\n    width: 560px;\r\n  }\r\n}\r\n\r\n.container-fluid {\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  width: 100%;\r\n  min-width: 400px;\r\n  max-width: 900px;\r\n  padding-left: 10px;\r\n  padding-right: 10px;\r\n}\r\n\r\n.container-static {\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  width: 800px;\r\n  padding-left: 10px;\r\n  padding-right: 10px;\r\n}\r\n```\r\n\r\n##### grid-row <small>(m)</small>\r\nThrough the `rows`, the display behavior of the individual `colums` set.\r\n\r\n- @param {Map} `$row`\r\n  - {Number} `spacing` - Padding on the right and left side\r\n  - {*} `layout` - Values: `block`, `inline`, `table`, `flex`\r\n  - {*} `valign` - Only on `layout:inline`. Values: `top`, `bottom`, `baseline`, `middle`\r\n  - {*} `align` - Values: `justify`, `center`, `right`, `left`\r\n\r\n```scss\r\n// Example\r\n.row-block {\r\n  @include grid-row(());\r\n}\r\n\r\n.row-table {\r\n  @include grid-row((\r\n   layout: table\r\n  ));\r\n}\r\n\r\n// Result\r\n.row-block:after {\r\n  content: '';\r\n  display: table;\r\n  clear: both;\r\n}\r\n.row-block .row-block {\r\n  margin-left: -10px;\r\n  margin-right: -10px;\r\n}\r\n\r\n.row-table {\r\n  display: table;\r\n  width: 100%;\r\n}\r\n```\r\n\r\n##### grid-colum <small>(m)</small>\r\nBuild the basestyle for all `colums`.\r\n\r\n- @requires `$kittn-bem`\r\n- @param {Map} `$colums`\r\n  - {Number} `spacing` - Padding on the right and left side\r\n  - {*} `layout` - Values: `block`, `inline`, `table`, `flex`\r\n  - {Bool} `extras` - The generated class can be extended with other classes\r\n  - {*} `valign` -  Only with `layout:inline`. Values: `top`, `bottom`, `baseline`, `middle`\r\n  - {*} `align` - Values: `justify`, `center`, `right`, `left`\r\n\r\n```scss\r\n// Example\r\n.colum {\r\n  @include grid-colum(());\r\n}\r\n\r\n.colum {\r\n  @include grid-colum((\r\n    layout: inline\r\n  ));\r\n}\r\n\r\n// Result\r\n.colum {\r\n  padding-left: 10px;\r\n  padding-right: 10px;\r\n  display: block;\r\n  float: left;\r\n}\r\n.colum:last-child {\r\n  float: right;\r\n}\r\n\r\n.colum-inline {\r\n  padding-left: 10px;\r\n  padding-right: 10px;\r\n  display: inline-block;\r\n  letter-spacing: normal;\r\n  word-spacing: normal;\r\n  white-space: normal;\r\n  vertical-align: top;\r\n  text-align: left;\r\n}\r\n```\r\n\r\n##### grid-size <small>(m)</small>\r\nDefines the width of a `colum`.\r\n\r\n- @param {Map} `$grid`\r\n  - {Number} `size` - Columsize\r\n  - {Number} `max` - The maximum number of columns (as a calculation basis)\r\n  - {Bool} `flex` - Activate the Flexbox function\r\n\r\n```scss\r\n// Example\r\n.colum {\r\n  @include grid-size((size: 5));\r\n}\r\n.colum-flex {\r\n  @include grid-size((\r\n    size: 200,\r\n    flex: true\r\n  ));\r\n}\r\n\r\n// Result\r\n.colum {\r\n  width: 41.666667%; }\r\n\r\n.colum-flex {\r\n  -webkit-box-flex: 12;\r\n  -webkit-flex: 12;\r\n      -ms-flex: 12;\r\n          flex: 12;\r\n}\r\n```\r\n\r\n##### pixel-grid <small>(m)</small>\r\nDefines the width of a colum in pixels.\r\n\r\n-@param {Map} `$grid`\r\n  - {Number} `size` - Columsize\r\n  - {Number} `max` - The maximum number of colums\r\n  - {Number} `margin` - Padding on the right and left side\r\n  - {Number} `space` - Width of the outer wrapper\r\n\r\n```scss\r\n// Example\r\n.pixel {\r\n  @include pixel-grid((\r\n    size: 5,\r\n    max: 12,\r\n    space: 1200\r\n  ));\r\n}\r\n.pixel-2 {\r\n  @include pixel-grid((\r\n    size: 10,\r\n    max: 24,\r\n    space: 1000\r\n  ));\r\n}\r\n\r\n// Result\r\n.pixel {\r\n  width: 480px;\r\n  margin-left: 10px;\r\n  margin-right: 10px;\r\n}\r\n.pixel-2 {\r\n  width: 396.666667px;\r\n  margin-left: 10px;\r\n  margin-right: 10px;\r\n}\r\n```\r\n\r\n##### grid-generator <small>(m)</small>\r\nGenerates a defined number of Colums\r\n\r\n- @requires `$kittn-bem`\r\n- @param {Map} `$generator`\r\n  - {Number} `colums` - Maximum Colums\r\n  - {bool|list} `select` - Be specified which Colum should be generated\r\n  - {bool|*} `name` - If the mixin is not called within a class, you can only transfer the selector\r\n  - {bool|*} `extend` - Thus, the generated classes are associated with other classes\r\n\r\n```scss\r\n// Example\r\n%colum {\r\n  @include grid-colum(());\r\n}\r\n\r\n.width {\r\n  @include grid-generator((\r\n    colums: 6,\r\n    extend: '%colum'\r\n  ));\r\n}\r\n\r\n.span {\r\n  @include grid-generator((\r\n    colums: 24,\r\n    select: 1 14 8 8 10\r\n  ));\r\n}\r\n\r\n// Result\r\n.width--1, .width--2, .width--3, .width--4, .width--5, .width--6 {\r\n  padding-left: 10px;\r\n  padding-right: 10px;\r\n  display: block;\r\n  float: left;\r\n}\r\n.width--1:last-child, .width--2:last-child,\r\n.width--3:last-child, .width--4:last-child,\r\n.width--5:last-child, .width--6:last-child {\r\n  float: right;\r\n}\r\n\r\n.width--1 {\r\n  width: 16.666667%; }\r\n.width--2 {\r\n  width: 33.333333%; }\r\n.width--3 {\r\n  width: 50%; }\r\n.width--4 {\r\n  width: 66.666667%; }\r\n.width--5 {\r\n  width: 83.333333%; }\r\n.width--6 {\r\n  width: 100%; }\r\n\r\n.span--1 {\r\n  width: 4.166667%; }\r\n.span--8 {\r\n  width: 33.333333%; }\r\n.span--10 {\r\n  width: 41.666667%; }\r\n.span--14 {\r\n  width: 58.333333%; }\r\n```\r\n\r\n##### grid-devide <small>(m)</small>\r\nThe Mixin  divide an existing grid, a grid of 12 can thus be converted into a 6 grid. But this only works if not Mobile First is working.\r\n\r\n- @requires `$kittn-bem`\r\n- @param {Map} `$devide`\r\n  - {Number} `colums` - Maximum Colums\r\n  - {Bool|*} `name` - If the mixin is not called within a class, you can only transfer the selector\r\n  - {Number} `devide` - Factor\r\n\r\n```scss\r\n// Example\r\n.width {\r\n  @include grid-devide((\r\n    colums: 12,\r\n    devide: 3\r\n  ));\r\n}\r\n\r\n.span {\r\n  @include grid-devide((\r\n    colums: 6,\r\n  ));\r\n}\r\n\r\n// Result\r\n.width--1, .width--5, .width--9 {\r\n  width: 25%; }\r\n.width--2, .width--6, .width--10 {\r\n  width: 50%; }\r\n.width--3, .width--7, .width--11 {\r\n  width: 75%; }\r\n.width--4, .width--8, .width--12 {\r\n  width: 100%; }\r\n\r\n.span--1, .span--4 {\r\n  width: 33.333333%; }\r\n.span--2, .span--5 {\r\n  width: 66.666667%; }\r\n.span--3, .span--6 {\r\n  width: 100%; }\r\n```\r\n\r\n##### grid-offset <small>(m)</small>\r\nGenerate the offset.\r\n\r\n- @param {Map} `$offset`\r\n  - {Number} `size` - Number of Colums\r\n  - {Number} `max` - Maximum Colums\r\n  - {*} `direction` - Values: `left`, `right`\r\n\r\n```scss\r\n// Example\r\n.offset {\r\n  @include grid-offset((\r\n    size: 2\r\n  ));\r\n}\r\n.offset-right {\r\n  @include grid-offset((\r\n    size: 5,\r\n    direction: right\r\n  ));\r\n}\r\n\r\n// Result\r\n.offset {\r\n  margin-left: 16.666667%;\r\n}\r\n.offset-right {\r\n  margin-right: 41.666667%;\r\n}\r\n```\r\n\r\n##### grid-offset-generator <small>(m)</small>\r\nGenerate the offset classes.\r\n\r\n- @requires `$kittn-bem`\r\n- @param {Map} `$offset`\r\n  - {Number} `max` - Maximum Colums\r\n  - {Bool|*} `name` - If the mixin is not called within a class, you can only transfer the selector\r\n\r\n```scss\r\n// Example\r\n.offset {\r\n  @include grid-offset-generator((\r\n    max: 3,\r\n  ));\r\n}\r\n\r\n// Result\r\n.offset-left--1 {\r\n  margin-left: 33.333333%; }\r\n.offset-right--1 {\r\n  margin-right: 33.333333%; }\r\n.offset-left--2 {\r\n  margin-left: 66.666667%; }\r\n.offset-right--2 {\r\n  margin-right: 66.666667%; }\r\n```\r\n\r\n##### grid-pushpull <small>(m)</small>\r\nGenerate Push and Pull Sizes\r\n\r\n- @param {Map} `$pushpull`\r\n  - {Number} `size` - Colums\r\n  - {Number} `max` - Maximum Colums\r\n  - {*} `direction` - Values: `push`, `pull`\r\n  - {Bool|*} `extend` - Thus, the generated classes are associated with other classes\r\n\r\n```scss\r\n// Example\r\n%relative {\r\n  position: relative;\r\n}\r\n\r\n.push {\r\n  @include grid-pushpull((\r\n    extend: '%relative'\r\n  ));\r\n}\r\n\r\n.pull {\r\n  @include grid-pushpull((\r\n    size: 4,\r\n    direction: pull,\r\n    extend: '%relative'\r\n  ));\r\n}\r\n\r\n// Result\r\n.push, .pull {\r\n  position: relative; }\r\n\r\n.push {\r\n  left: 8.333333%; }\r\n\r\n.pull {\r\n  right: 33.333333%; }\r\n```\r\n\r\n##### grid-pushpull-generator <small>(m)</small>\r\nGenerate the Push and Pull classes.\r\n\r\n- @requires `$kittn-bem`\r\n- @param {Map} `$pushpull`\r\n  - {Number} `max` - Maximum Colums\r\n  - {Bool|*} `name` - If the mixin is not called within a class, you can only transfer the selector\r\n  - {Bool|*} `extend` - Thus, the generated classes are associated with other classes\r\n\r\n```scss\r\n// Example\r\n.move {\r\n  @include grid-pushpull-generator((\r\n    max: 4\r\n  ));\r\n}\r\n\r\n// Result\r\n.move-push--1 {\r\n  position: relative;\r\n  left: 25%; }\r\n.move-pull--1 {\r\n  position: relative;\r\n  right: 25%; }\r\n.move-push--2 {\r\n  position: relative;\r\n  left: 50%; }\r\n.move-pull--2 {\r\n  position: relative;\r\n  right: 50%; }\r\n.move-push--3 {\r\n  position: relative;\r\n  left: 75%; }\r\n.move-pull--3 {\r\n  position: relative;\r\n  right: 75%; }\r\n```\r\n\r\n##### grid-normalizer <small>(m)</small>\r\nThe Normalizer reset the specific grid settings.\r\n\r\n- @requires `$kittn-bem`\r\n- @param {Map} `$normalize`\r\n  - {*} `name` - Name of the selector to be reseted\r\n  - {*} `option` - Values: `blockgrid`, `inlinetable`, `offset`, `pushpull`\r\n  - {Bool} `important` - Add an `!important`\r\n\r\n```scss\r\n// Example\r\n@include grid-normalizer((\r\n  name: 'move',\r\n  option: pushpull\r\n));\r\n\r\n@include grid-normalizer((\r\n  name: 'colum'\r\n))\r\n\r\n// Result\r\n[class^=\"move-push--\"],\r\n[class*=\" move-push--\"] {\r\n  left: 0; }\r\n\r\n[class^=\"move-pull--\"],\r\n[class*=\" move-pull--\"] {\r\n  right: 0; }\r\n\r\n[class^=\"colum\"],\r\n[class*=\"colum\"] {\r\n  float: none;\r\n  width: 100%; }\r\n```\r\n\r\n\r\n#### Iconfont\r\n`file: scr/sass/framework/modules/_iconfont.scss`\r\n\r\n##### icon <small>(f)</small>\r\nIncludes the content code from the IconFont Map.\r\n\r\n- @requires `$kittn-font-icons`\r\n- @param {*} `$name` - Key to the Map Entry\r\n- @returns {*}\r\n\r\n```scss\r\n// Map\r\n// file: src/sass/maps/iconfontlist.scss\r\n\r\n$kittn-font-icons: (\r\n  test: '/e023'\r\n);\r\n```\r\n\r\n```scss\r\n// Example\r\n.icon {\r\n  &:before {\r\n    content: icon(test);\r\n  }\r\n}\r\n\r\n// Result\r\n.icon:before {\r\n  content: \"/e023\";\r\n}\r\n```\r\n\r\n##### iconfont <small>(m)</small>\r\nGenerates the base style for all icons.\r\n\r\n- @access private\r\n- @param {*} `$iconFontName` - Name off the Icon Font\r\n\r\n```scss\r\n// Example\r\n%icon {\r\n  @include iconfont('iconfont');\r\n}\r\n.test {\r\n  @extend %icon;\r\n\r\n  &:before {\r\n    content: icon(test);\r\n  }\r\n}\r\n\r\n// Result\r\n.test {\r\n  -webkit-font-smoothing: antialiased;\r\n  -moz-osx-font-smoothing: grayscale;\r\n  display: inline-block;\r\n  font-family: \"iconfont\";\r\n  font-style: normal;\r\n  font-weight: normal !important;\r\n  speak: none;\r\n  text-decoration: inherit;\r\n  line-height: 1;\r\n}\r\n.test:before {\r\n  content: \"/e023\";\r\n}\r\n```\r\n\r\n##### icon-font-generator <small>(m)</small>\r\nGenerates the base icon font style.\r\n\r\n- @requires `$kittn-iconfont`, `$kittn-bem`\r\n- @param {*} `$iconFontName` - Name off the Icon Font\r\n\r\n```scss\r\n// Example\r\n@include icon-font-generator('iconfont');\r\n\r\n// Result\r\n[class^=\"f-icon__\"]:before,\r\n[class*=\" f-icon__\"]:before,\r\n[data-icon]:before {\r\n  -webkit-font-smoothing: antialiased;\r\n  -moz-osx-font-smoothing: grayscale;\r\n  display: inline-block;\r\n  font-family: \"iconfont\";\r\n  font-style: normal;\r\n  font-weight: normal !important;\r\n  speak: none;\r\n  text-decoration: inherit;\r\n  line-height: 1; }\r\n\r\n[data-icon]:before {\r\n  content: attr(data-icon); }\r\n```\r\n\r\n##### icon-generator <small>(m)</small>\r\nGenerates all the icons of the icon map as classes.\r\n\r\n- @requires `$kittn-font-icons`, `$kittn-iconfont`\r\n- @param {Map} `$icons` ($kittn-font-icons) - Icon Font Map\r\n\r\n```scss\r\n// Example\r\n@include icon-generator;\r\n\r\n// Result\r\n.f-icon__test:before {\r\n  content: \"/e023\";\r\n}\r\n.f-icon__logo:before {\r\n  content: \"/e024\";\r\n}\r\n```\r\n\r\n##### icon <small>(m)</small>\r\nAdds Icon contents in a class.\r\n\r\n- @param {*} `$name` - Key to the Map Entry\r\n- @param {Map} `$options`\r\n  - {Bool|*} `extend` (false) - When the Icon need Extend with a Class\r\n  - {Bool|*} `font` (false) - When the Icon need the Iconfont Attributes. Needed when sitting in a Media Query\r\n\r\n```scss\r\n// Example\r\n%icon {\r\n  @include iconfont('iconfont');\r\n}\r\n\r\n.test {\r\n  &:before {\r\n    @include icon(test,(\r\n      extend: '%icon'\r\n    ));\r\n  }\r\n}\r\n\r\n.lego {\r\n  &:before {\r\n    @include icon(logo,(\r\n      font: 'iconfont'\r\n    ));\r\n  }\r\n}\r\n\r\n// Result\r\n.test:before {\r\n  -webkit-font-smoothing: antialiased;\r\n  -moz-osx-font-smoothing: grayscale;\r\n  display: inline-block;\r\n  font-family: \"iconfont\";\r\n  font-style: normal;\r\n  font-weight: normal !important;\r\n  speak: none;\r\n  text-decoration: inherit;\r\n  line-height: 1;\r\n}\r\n.test:before {\r\n  content: \"/e023\";\r\n}\r\n.lego:before {\r\n  -webkit-font-smoothing: antialiased;\r\n  -moz-osx-font-smoothing: grayscale;\r\n  display: inline-block;\r\n  font-family: \"iconfont\";\r\n  font-style: normal;\r\n  font-weight: normal !important;\r\n  speak: none;\r\n  text-decoration: inherit;\r\n  line-height: 1;\r\n  content: \"/e024\";\r\n}\r\n```\r\n\r\n##### ext-icon <small>(m)</small>\r\nExtended existing classes with the icon classes.\r\n\r\n- @requires `$kittn-bem`, `$kittn-iconfont`\r\n- @param {*} `$name` - Name off the Icon (from the Map)\r\n\r\n```scss\r\n// Example\r\n@include icon-font-generator('iconfont');\r\n\r\n@include icon-generator();\r\n\r\n.box {\r\n  @include ext-icon(test);\r\n}\r\n\r\n// Result\r\n[class^=\"f-icon__\"]:before,\r\n[class*=\" f-icon__\"]:before,\r\n[data-icon]:before {\r\n  -webkit-font-smoothing: antialiased;\r\n  -moz-osx-font-smoothing: grayscale;\r\n  display: inline-block;\r\n  font-family: \"iconfont\";\r\n  font-style: normal;\r\n  font-weight: normal !important;\r\n  speak: none;\r\n  text-decoration: inherit;\r\n  line-height: 1; }\r\n\r\n[data-icon]:before {\r\n  content: attr(data-icon); }\r\n\r\n.f-icon__test:before, .box:before {\r\n  content: \"/e023\"; }\r\n\r\n.f-icon__logo:before {\r\n  content: \"/e024\"; }\r\n```\r\n\r\n#### Images\r\n`file: scr/sass/framework/modules/_images.scss`\r\n\r\n##### _getImageDimensions <small>(m)</small>\r\nUsed for internal calculation of the image data.\r\n\r\n- @access private\r\n\r\n##### image <small>(m)</small>\r\nAdds a single image. The data required is thus written on the `Gulp` tasks in the respective image map.\r\n\r\n- @requires `$kittn-directorys`\r\n- @param {*} `$image` - Name of the Image\r\n- @param {*} `$dimensions` - `both` = height & width, `width` = width, `height` = height\r\n- @param {*} `$pos` - The Image Position - can be `false`\r\n- @param {Bool} `$retina` - With set on `true` the retina fallback will be included\r\n\r\n```scss\r\n// Example\r\n.box {\r\n  @include image(blue);\r\n}\r\n.box-2 {\r\n  @include image(icon, width);\r\n}\r\n\r\n// Result\r\n.box {\r\n  background-image: url(\"/assets/img/single/blue.png\");\r\n  background-repeat: no-repeat;\r\n  width: 184px;\r\n  height: 176px;\r\n}\r\n.box-2 {\r\n  background-image: url(\"/assets/img/single/icon.png\");\r\n  background-repeat: no-repeat;\r\n  width: 281px;\r\n}\r\n```\r\n\r\n##### texture <small>(m)</small>\r\nAdd textures images\r\n\r\n- @requires `$kittn-directorys\r\n- @param {*} `$image` - Name of the Image\r\n- @param {*} `$repeat` - How the Image would be repeated. `x`: repeat-x, `y`: repeat-y\r\n- @param {List|Bool} `$pos` - The Image Position - can be `false`\r\n- @param {Bool} `$retina` - With set on 'true' the retina fallback will be included\r\n\r\n```scss\r\n// Example\r\n.texture {\r\n  @include texture(pattern);\r\n}\r\n.texture-2 {\r\n  @include texture(pattern, $repeat: x);\r\n}\r\n.texture-3 {\r\n  @include texture(pattern, $repeat: y);\r\n}\r\n\r\n// Result\r\n.texture {\r\n  background-image: url(\"/assets/img/textures/pattern.png\");\r\n}\r\n.texture-2 {\r\n  background-image: url(\"/assets/img/textures/pattern.png\");\r\n  background-repeat: repeat-x;\r\n  height: 393px;\r\n}\r\n.texture-3 {\r\n  background-image: url(\"/assets/img/textures/pattern.png\");\r\n  background-repeat: repeat-y;\r\n  width: 373px;\r\n}\r\n```\r\n\r\n##### svgpng <small>(m)</small>\r\nAdd SVG Images and integrate the PNG Fallback for old Browsers.\r\n\r\n- @requires `$kittn-directorys\r\n- @param {*} `$image` - Name of the Image - the SVG File must be in the Same directory\r\n- @param {*} `$dimensions` - `both` = height & width | `width` = width | `height` = height\r\n- @param {List} `$pos` - The Image Position - can be `false`\r\n\r\n```scss\r\n// Example\r\n.image {\r\n  @include svgpng(illu);\r\n}\r\n\r\n// Result\r\n.image {\r\n  background-image: url(\"/assets/img/svg/illu.png\");\r\n  background-repeat: no-repeat;\r\n  width: 1019px;\r\n  height: 357px;\r\n}\r\n.svg .image {\r\n  background-image: url(\"/assets/img/svg/illu.svg\");\r\n  background-size: 1019px 357px;\r\n}\r\n```\r\n\r\n##### svg <small>(m)</small>\r\nAdd SVG image without any fallback image.\r\n\r\n- @requires `$kittn-directorys\r\n- @param {*} `$image` - The Name of the SVG Image\r\n- @param {List} `$dimensions` - The Dimensions of the Image Container - can be 100%\r\n- @param {List} `$pos` - Native CSS Image Positions\r\n- @param {Bool} `$repeat` - Image Repeat - native CSS Declaration\r\n\r\n```scss\r\n// Example\r\n.vector {\r\n  @include svg(illu)\r\n}\r\n.repeat-vector {\r\n  @include svg(illu, $repeat: repeat-x);\r\n}\r\n.resize-vector {\r\n  @include svg(illu, $dimensions: 40px 30px);\r\n}\r\n\r\n// Result\r\n.vector {\r\n  background-image: url(\"/assets/img/svgonly/illu.svg\");\r\n  background-repeat: no-repeat;\r\n  background-size: 100% 100%;\r\n  width: 100%;\r\n  height: 100%;\r\n}\r\n\r\n.repeat-vector {\r\n  background-image: url(\"/assets/img/svgonly/illu.svg\");\r\n  background-repeat: repeat-x;\r\n  background-size: 100% 100%;\r\n  width: 100%;\r\n  height: 100%;\r\n}\r\n\r\n.resize-vector {\r\n  background-image: url(\"/assets/img/svgonly/illu.svg\");\r\n  background-repeat: no-repeat;\r\n  background-size: 40px 30px;\r\n  width: 40px;\r\n  height: 30px;\r\n}\r\n```\r\n\r\n##### sprite-generator <small>(m)</small>\r\nGenerate the Spritemap container. Will be turned automatically.\r\n\r\n- @access private\r\n- @requires `$kittn-sprite`\r\n\r\n##### sprite <small>(m)</small>\r\nAdd the selected sprite.\r\n\r\n- @param {*} `$name` - Name of the Sprite\r\n- @param {Bool} `$retina` - With set on `true` the retina fallback will be included\r\n- @param {*} `$dimensions` - `both`: height & width, `width`: width, `height`: height\r\n- @param {Number} `$offset-x` - Offset the Background Position on the x axis\r\n- @param {Number} `$offset-y` - Offset the Background Position on the y axis\r\n- @param {*} `$display` - Display mode\r\n\r\n```scss\r\n// Example\r\n.sprite {\r\n  @include sprite(cross);\r\n}\r\n\r\n.sprite-and-retina {\r\n  @include sprite(cross, $retina: true);\r\n}\r\n\r\n// Result\r\n.sprite {\r\n  background-position: 0px 0px;\r\n  width: 590px;\r\n  height: 466px;\r\n  display: inline-block;\r\n}\r\n\r\n.sprite-and-retina {\r\n  background-position: 0px 0px;\r\n  width: 590px;\r\n  height: 466px;\r\n  display: inline-block;\r\n}\r\n@media (-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi) {\r\n  .sprite-and-retina {\r\n    background-position: 0px 0px;\r\n    background-size: 590px 466px;\r\n  }\r\n}\r\n```\r\n\r\n#### Lines\r\n`file: scr/sass/framework/modules/_lines.scss`\r\n\r\n##### rem <small>(f)</small>\r\nConverts Px into REM.\r\n\r\n- @requires `$kittn-typo`\r\n- @param {Number} `$px` - The Size in PX\r\n- @param {Number} `$base` - The Base for the\r\n\r\n```scss\r\n// Example\r\n.test {\r\n  width: rem(200px);\r\n}\r\n\r\n// Result\r\n.test {\r\n  width: 14.705882rem;\r\n}\r\n```\r\n\r\n##### remsize <small>(m)</small>\r\nCalculated sizes based on the base line-height. The recalculations is admitted only if the `$kittn-typo` the `unit` was placed on `rem`. IE8 gets its own fallback via PX values.\r\n\r\n- @access private\r\n- @requires `$kittn-typo`\r\n- @param {*} `$arg` - Attribute\r\n- @param {Number} `$size` - Multiplicator\r\n\r\n```scss\r\n// Example\r\n.test {\r\n  @include _remsize(height, 4);\r\n  @include _remsize(margin-top, .5);\r\n}\r\n\r\n// Result\r\n.test {\r\n  height: 6.176471rem;\r\n  margin-top: 0.772059rem;\r\n}\r\n```\r\n\r\n##### pxsize <small>(m)</small>\r\nCalculates PX values ​​into REM. The recalculations is admitted only if the `$kittn-typo` the `unit` was placed on `rem`. IE8 gets its own fallback via PX values.\r\n\r\n- @access private\r\n- @requires `$kittn-typo`<br>\r\n- @param {*} `$arg` - Attribute\r\n- @param {Number} `$size` - Value\r\n\r\n```scss\r\n// Example\r\n.test {\r\n  @include _pxsize(height, 16);\r\n  @include _pxsize(margin-top, 32);\r\n}\r\n\r\n// Result\r\n.test {\r\n  height: 1.176471rem;\r\n  margin-top: 2.352941rem;\r\n}\r\n```\r\n\r\n##### rem <small>(m)</small>\r\nCalculates the sizes Dynamic. The size may be once about Lines (calculation by multiplying the Base line-height), or Px in the REM are then converted. IE8 gets a pixel fallback in IE8 Compatibility active.\r\n\r\n- @param {*} `$arg` - Attribute\r\n- @param {Number} `$size` - Size\r\n- @param {Bool} `$baseline` - When 'true', the Value follow the Baselinerule\r\n\r\n```scss\r\n// Example\r\n.test {\r\n  @include rem(width, 600);\r\n  @include rem(margin-top, 50);\r\n}\r\n\r\n// Result\r\n.test {\r\n  width: 44.117647rem;\r\n  margin-top: 3.676471rem;\r\n}\r\n```\r\n\r\n##### lineheight <small>(m)</small>\r\nBased on the `rem` mixin.\r\n\r\n- @param {Number} `$size` - Size\r\n\r\n```scss\r\n// Example\r\n.test {\r\n  @include lineheight(40);\r\n}\r\n\r\n// Result\r\n.test {\r\n  line-height: 2.941176rem;\r\n}\r\n```\r\n\r\n##### marginbottom <small>(m)</small>\r\nBased on the `rem` mixin.\r\n\r\n- @param {Number} `$size` - Size\r\n\r\n```scss\r\n// Example\r\n.test {\r\n  @include marginbottom(20);\r\n}\r\n\r\n// Result\r\n.test {\r\n  margin-bottom: 1.470588rem;\r\n}\r\n```\r\n\r\n##### margintop <small>(m)</small>\r\nBased on the `rem` mixin.\r\n\r\n- @param {Number} `$size` - Size\r\n\r\n```scss\r\n// Example\r\n.test {\r\n  @include margintop(20);\r\n}\r\n\r\n// Result\r\n.test {\r\n  margin-top: 1.470588rem;\r\n}\r\n```\r\n\r\n##### marginleft <small>(m)</small>\r\nBased on the `rem` mixin.\r\n\r\n- @param {Number} `$size` - Size\r\n\r\n```scss\r\n// Example\r\n.test {\r\n  @include marginleft(10);\r\n}\r\n\r\n// Result\r\n.test {\r\n  margin-left: 0.735294rem;\r\n}\r\n```\r\n\r\n##### marginright <small>(m)</small>\r\nBased on the `rem` mixin.\r\n\r\n- @param {Number} `$size` - Size\r\n\r\n```scss\r\n// Example\r\n.test {\r\n  @include marginright(10);\r\n}\r\n\r\n// Result\r\n.test {\r\n  margin-right: 0.735294rem;\r\n}\r\n```\r\n\r\n##### paddingtop <small>(m)</small>\r\nBased on the `rem` mixin.\r\n\r\n- @param {Number} `$size` - Size\r\n\r\n```scss\r\n// Example\r\n.test {\r\n  @include paddingtop(20);\r\n}\r\n\r\n// Result\r\n.test {\r\n  padding-top: 1.470588rem;\r\n}\r\n```\r\n\r\n##### paddingbottom <small>(m)</small>\r\nBased on the `rem` mixin.\r\n\r\n- @param {Number} `$size` - Size\r\n\r\n```scss\r\n// Example\r\n.test {\r\n  @include paddingbottom(20);\r\n}\r\n\r\n// Result\r\n.test {\r\n  padding-bottom: 1.470588rem;\r\n}\r\n```\r\n\r\n##### paddingleft <small>(m)</small>\r\nBased on the `rem` mixin.\r\n\r\n- @param {Number} `$size` - Size\r\n\r\n```scss\r\n// Example\r\n.test {\r\n  @include paddingleft(10);\r\n}\r\n\r\n// Result\r\n.test {\r\n  padding-left: 0.735294rem;\r\n}\r\n```\r\n##### paddingright <small>(m)</small>\r\nBased on the `rem` mixin.\r\n\r\n- @param {Number} $size - Size\r\n\r\n```scss\r\n// Example\r\n.test {\r\n  @include paddingright(10);\r\n}\r\n\r\n// Result\r\n.test {\r\n  padding-right: 0.735294rem;\r\n}\r\n```\r\n\r\n##### height <small>(m)</small>\r\nBased on the `rem` mixin.\r\n\r\n- @param {Number} `$size` - Size\r\n\r\n```scss\r\n// Example\r\n.test {\r\n  @include height(100);\r\n}#\r\n// Result\r\n.test {\r\n  height: 7.352941rem;\r\n}\r\n```\r\n\r\n##### fontsize <small>(m)</small>\r\nBased on the `rem` mixin.\r\n\r\n- @param {Number} `$size` - Size\r\n\r\n```scss\r\n// Example\r\n.test {\r\n  @include fontsize(16);\r\n}\r\n\r\n// Result\r\n.test {\r\n  font-size: 1.176471rem;\r\n}\r\n```\r\n\r\n##### fontcalc <small>(m)</small>\r\nBased on the `rem` mixin. Calculates in addition to the font size also the line-height.\r\n\r\n- @param {Number} `$fontsize` - Font Size\r\n- @param {Bool|Number} `$lineheight` (false) - Lineheight for the Font - can be false than used the factor\r\n- @param {Number} `$factor` (1.2) - The Calculationfactor\r\n\r\n```scss\r\n// Example\r\n.test {\r\n  @include fontcalc(16, 20);\r\n}\r\n.test-2 {\r\n  @include fontcalc(16, $factor: 2);\r\n}\r\n\r\n// Result\r\n.test {\r\n  font-size: 1.176471rem;\r\n  line-height: 1.470588rem;\r\n}\r\n.test-2 {\r\n  font-size: 1.176471rem;\r\n  line-height: 2.352941rem;\r\n}\r\n```\r\n\r\n#### Modernizr\r\n`file: scr/sass/framework/modules/_modernizr.scss`\r\n\r\n##### Modernizr <small>(m)</small>\r\nThe integrated feature check classes of Modernizr, you can integrate fallbacks.\r\n\r\n- @access private\r\n\r\n##### yep <small>(m)</small>\r\nBecomes active at positive feature check classes\r\n\r\n- @param {argList} `$features` - Checked Features \r\n\r\n```scss\r\n// Example\r\n.test {\r\n  @include yep(box-shadow) {\r\n    box-shadow: 0 0 3px rgba(0,0,0,0.5);\r\n  }\r\n}\r\n\r\n// Result\r\n.box-shadow .test {\r\n  box-shadow: 0 0 3px rgba(0, 0, 0, 0.5);\r\n}\r\n```\r\n\r\n##### nope <small>(m)</small>\r\nBecomes active at negative feature check classes\r\n\r\n- @param {argList} `$features` - Checked Features \r\n\r\n```scss\r\n// Example\r\n.test {\r\n  @include nope(box-shadow) {\r\n    border: 3px solid #ccc;\r\n  }\r\n}\r\n\r\n// Result\r\n.no-js .test, .no-box-shadow .test {\r\n  border: 3px solid #ccc;\r\n}\r\n```\r\n\r\n#### Positioning\r\n`scr/sass/framework/modules/_positioning.scss`\r\n\r\n##### z <small>(f)</small>\r\nPicked the corresponding z-index from the zlayer Map.\r\n\r\n- @requires `$kittn-zlayer-map`\r\n- @param {*} `$layer` - The layer to use\r\n- @param {Map} `$z-layers` ($kittn-zlayer-map) - Connection through Z-Map\r\n- @returns {Number}\r\n\r\n```scss\r\n// Example\r\n.z {\r\n  z-index: z(default);\r\n}\r\n\r\n// Result\r\n.z {\r\n  z-index: 10;\r\n}\r\n```\r\n\r\n##### z <small>(m)</small>\r\nPicked the corresponding z-index of the map, it generates a z-index you can still manipulate the with offset.\r\n\r\n- @requires `$kittn-zlayer-map`\r\n- @param {*} `$layer` - The layer to use\r\n- @param {Number} `$offset` - Add or substract an offset\r\n\r\n```scss\r\n// Example\r\n.z {\r\n  @include z(default);\r\n}\r\n.z-offset {\r\n  @include z(default, 5);\r\n}\r\n.z-negative-offset {\r\n  @include z(default, -2);\r\n}\r\n\r\n// Result\r\n.z {\r\n  z-index: 10;\r\n}\r\n.z-offset {\r\n  z-index: 15;\r\n}\r\n.z-negative-offset {\r\n  z-index: 8;\r\n}\r\n```\r\n\r\n##### shift <small>(m)</small>\r\nAssigns the element a z-index and also determines the position-type.\r\n\r\n- @param {Number} `$index` - Z-index\r\n- @param {Number} `$offset` - Offset\r\n- @param {Bool|*} `$position` - Position. Values: `r` relative, `a` absolute, `f` fixed\r\n\r\n```scss\r\n// Example\r\n.z-1 {\r\n  @include shift(10)\r\n}\r\n.z-2 {\r\n  @include shift(10,0,r)\r\n}\r\n.z-3 {\r\n  @include shift(z(default), 4, a);\r\n}\r\n\r\n// Result\r\n.z-1 {\r\n  z-index: 10;\r\n}\r\n.z-2 {\r\n  position: relative;\r\n  z-index: 10;\r\n}\r\n.z-3 {\r\n  position: absolute;\r\n  z-index: 14;\r\n}\r\n```\r\n\r\n##### set-position <small>(m)</small>\r\nSets the position for the position mixins.\r\n\r\n- @access private\r\n- @param {List} `$position`\r\n  - One position Value: `top`\r\n  - Two position Values: `top`, `left`\r\n  - Four position Values: `top`, `right`, `bottom`, `left`\r\n\r\nThe Mixin evaluates values ​​such as `0` is not sufficient, it serves only as a placeholder. If you want the position set to `0`, `z` you wear for a Zero.\r\n\r\n##### relative <small>(m)</small>\r\nSet the element to `position: relative` also set the position.\r\n\r\n- @param {List} `$position`\r\n  - One position Value: `top`\r\n  - Two position Values: `top`, `left`\r\n  - Four position Values: `top`, `right`, `bottom`, `left`\r\n  \r\n```scss\r\n// Example\r\n.test-1 {\r\n  @include relative;\r\n}\r\n.test-2 {\r\n  @include relative(10);\r\n}\r\n.test-3 {\r\n  @include relative(1rem 10 0 4%);\r\n}\r\n.test-z {\r\n  @include relative(1rem z z 4%);\r\n}\r\n\r\n// Result\r\n.test-1 {\r\n  position: relative;\r\n}\r\n.test-2 {\r\n  position: relative;\r\n  top: 10px;\r\n}\r\n.test-3 {\r\n  position: relative;\r\n  top: 1rem;\r\n  right: 10px;\r\n  left: 4%;\r\n}\r\n.test-z {\r\n  position: relative;\r\n  top: 1rem;\r\n  right: 0;\r\n  bottom: 0;\r\n  left: 4%;\r\n}\r\n```\r\n\r\n##### absolute <small>(m)</small>\r\nSet the element to `position: absolute` also set the position.\r\n\r\n- @param {List} `$position`\r\n  - One position Value: `top`\r\n  - Two position Values: `top`, `left`\r\n  - Four position Values: `top`, `right`, `bottom`, `left`\r\n\r\n```scss\r\n// Example\r\n.test-1 {\r\n  @include absolute;\r\n}\r\n.test-2 {\r\n  @include absolute(10 2%);\r\n}\r\n.test-3 {\r\n  @include absolute(20 10 z 4%);\r\n}\r\n\r\n// Result\r\n.test-1 {\r\n  position: absolute;\r\n}\r\n.test-2 {\r\n  position: absolute;\r\n  top: 10px;\r\n  left: 2%;\r\n}\r\n.test-3 {\r\n  position: absolute;\r\n  top: 20px;\r\n  right: 10px;\r\n  bottom: 0;\r\n  left: 4%;\r\n}\r\n```\r\n\r\n##### fixed <small>(m)</small>\r\nSet the element to `position: fixed` also set the position.\r\n\r\n- @param {List} `$position`\r\n  - One position Value: `top`\r\n  - Two position Values: `top`, `left`\r\n  - Four position Values: `top`, `right`, `bottom`, `left`\r\n  \r\n```scss\r\n// Example\r\n.test-1 {\r\n  @include fixed;\r\n}\r\n.test-2 {\r\n  @include fixed(10 2%);\r\n}\r\n.test-3 {\r\n  @include fixed(z z);\r\n}\r\n\r\n// Result\r\n.test-1 {\r\n  position: fixed;\r\n}\r\n.test-2 {\r\n  position: fixed;\r\n  top: 10px;\r\n  left: 2%;\r\n}\r\n.test-3 {\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n}\r\n```\r\n\r\n##### static <small>(m)</small>\r\nResets the settings of the Position mixins.\r\n\r\n```scss\r\n// Example\r\n.reset {\r\n  @include static;\r\n}\r\n\r\n// Result\r\n.reset {\r\n  position: static;\r\n  left: inherit;\r\n  right: inherit;\r\n  top: inherit;\r\n  bottom: inherit;\r\n}\r\n```\r\n\r\n##### bar <small>(m)</small>\r\nGenerate a bar element.\r\n\r\n- @param {*} `$variant`  - `f` for fixed, `a` for absolute\r\n- @param {*} `$position` - `t` Top, `b` Bottom, `l` Left, `r` Right\r\n- @param {Number} `$z-index` - The Z-Index\r\n\r\n```scss\r\n// Example\r\n.bar-left {\r\n  @include bar(f, l);\r\n}\r\n.bar-top {\r\n  @include bar(a, t);\r\n}\r\n\r\n// Result\r\n.bar-left {\r\n  position: fixed;\r\n  z-index: 9000;\r\n  left: 0;\r\n  top: 0;\r\n  height: 100%;\r\n}\r\n.bar-top {\r\n  position: absolute;\r\n  z-index: 9000;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100%;\r\n}\r\n```\r\n\r\n##### bar-top <small>(m)</small>\r\nGenerate a bar element - top position.\r\n\r\n- @param {value} `$z` - The Z-Index\r\n- @param {*} `$variant` - `f`: fixed, `a`: absolute\r\n\r\n```scss\r\n// Example\r\n.bar {\r\n  @include bar-top;\r\n}\r\n.bar-2 {\r\n  @include bar-top($variant: a);\r\n}\r\n\r\n// Result\r\n.bar {\r\n  position: fixed;\r\n  z-index: 9000;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100%;\r\n}\r\n.bar-2 {\r\n  position: absolute;\r\n  z-index: 9000;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100%;\r\n}\r\n```\r\n\r\n##### bar-bottom <small>(m)</small>\r\nGenerate a bar element - bottom position.\r\n\r\n- @param {value} `$z` - The Z-Index\r\n- @param {*} `$variant` - `f`: fixed, `a`: absolute\r\n\r\n```scss\r\n// Example\r\n.bar {\r\n  @include bar-bottom;\r\n}\r\n.bar-2 {\r\n  @include bar-bottom(10, a);\r\n}\r\n\r\n// Result\r\n.bar {\r\n  position: fixed;\r\n  z-index: 9000;\r\n  bottom: 0;\r\n  left: 0;\r\n  width: 100%;\r\n}\r\n.bar-2 {\r\n  position: absolute;\r\n  z-index: 10;\r\n  bottom: 0;\r\n  left: 0;\r\n  width: 100%;\r\n}\r\n```\r\n\r\n##### position-translate <small>(m)</small>\r\nUsed for the calculation of the `pivot-points` needs.\r\n\r\n- @access private\r\n- @param  {*|number|bool} `$pos` - Position Value. Values: `left`, `center`, `right`, `top`, `middle`, `bottom`\r\n- @param  {*} `$axis` - The Position Axis. Values: `vert`, `horz`\r\n\r\n##### pivot <small>(m)</small>\r\nPositions the point from which the further positioning starts.\r\n\r\n- @param {*|number|bool} `$vert` (middle) - Vertical Position from the Pivot Point. Values: `top` ,`middle` ,`bottom`\r\n- @param {*|number|bool} `$horz` (false)  - Horizontal Position from the Pivot Point. Values: `left`, `center`, `right`\r\n\r\n```scss\r\n// Example\r\n.test-1 {\r\n  @include pivot(middle);\r\n}\r\n.test-2 {\r\n  @include pivot(middle,center);\r\n}\r\n.test-3 {\r\n  @include pivot(70,center);\r\n}\r\n\r\n// Result\r\n.test-1 {\r\n  transform: translate(-50%, 0);\r\n}\r\n.test-2 {\r\n  transform: translate(-50%, -50%);\r\n}\r\n.test-3 {\r\n  transform: translate(-70%, -50%);\r\n}\r\n```\r\n\r\n##### slide <small>(m)</small>\r\nMoves an item.\r\n\r\n- @param {*|number|bool} `$vert` (middle) - Vertical Position from the Pivot Point. Values: `top` ,`middle` ,`bottom`\r\n- @param {*|number|bool} `$horz` (false)  - Horizontal Position from the Pivot Point. Values: `left`, `center`, `right`\r\n\r\n```scss\r\n// Example\r\n.slide-1 {\r\n  @include slide(middle);\r\n}\r\n.slide-2 {\r\n  @include slide(middle,center);\r\n}\r\n.slide-3 {\r\n  @include slide(70,center);\r\n}\r\n\r\n// Result\r\n.slide-1 {\r\n  position: absolute;\r\n  top: 50%;\r\n}\r\n.slide-2 {\r\n  position: absolute;\r\n  top: 50%;\r\n  left: 50%;\r\n}\r\n.slide-3 {\r\n  position: absolute;\r\n  top: 70%;\r\n  left: 50%;\r\n}\r\n```\r\n\r\n##### pivot-center <small>(m)</small>\r\nMoves an item to the absolute middle.\r\n\r\n```scss\r\n// Example\r\n.center {\r\n  @include pivot-center;\r\n}\r\n\r\n// Result\r\n.center {\r\n  position: absolute;\r\n  top: 50%;\r\n  left: 50%;\r\n  transform: translate(-50%, -50%);\r\n}\r\n```\r\n\r\n##### absolute-middle <small>(m)</small>\r\nDefines the size of an element and positions it in the center. Not suitable for items which their dimensions change dynamically.\r\n\r\n- @param {List} `$element` - Width and the Height of the Element\r\n\r\n```scss\r\n// Example\r\n.middle-1 {\r\n  @include absolute-middle;\r\n}\r\n.middle-2 {\r\n  @include absolute-middle(100 300);\r\n}\r\n\r\n// Result\r\n.middle-1 {\r\n  height: 0px;\r\n  width: 0px;\r\n  position: absolute;\r\n  left: 50%;\r\n  top: 50%;\r\n  margin-top: 0px;\r\n  margin-left: 0px;\r\n}\r\n.middle-2 {\r\n  height: 300px;\r\n  width: 100px;\r\n  position: absolute;\r\n  left: 50%;\r\n  top: 50%;\r\n  margin-top: -150px;\r\n  margin-left: -50px;\r\n}\r\n```\r\n\r\n##### overlap <small>(m)</small>\r\nThus, an element across the width of the outer wrapper grow out.\r\n\r\n- @param {list} `$size` - The Sidevalues, one value can be used for two sides, two values first for left second for right\r\n\r\n```scss\r\n// Example\r\n.overlap-1 {\r\n  @include overlap(20);\r\n}\r\n.overlap-2 {\r\n  @include overlap(.5rem 10);\r\n}\r\n\r\n// Result\r\n.overlap-1 {\r\n  margin-left: -20px;\r\n  margin-right: -20px;\r\n}\r\n.overlap-2 {\r\n  margin-left: -0.5rem;\r\n  margin-right: -10px;\r\n}\r\n```\r\n\r\n#### Shorthands\r\n`file: scr/sass/framework/modules/_shorthands.scss`\r\n\r\nRegular it is recommended to load the Shorthand mixins in a Placeholder Selector and then to continue working via `@extend`.\r\n\r\n```scss\r\n// Example\r\n%clearfix {\r\n  @include clearfix;\r\n}\r\n%center {\r\n  @include block-center();\r\n}\r\n\r\n.test-1 {\r\n  @extend %clearfix;\r\n}\r\n.colum {\r\n  @extend %clearfix, %center;\r\n}\r\n\r\n// Result\r\n.test-1:after, .colum:after {\r\n  content: '';\r\n  display: table;\r\n  clear: both;\r\n}\r\n\r\n.colum {\r\n  display: block;\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n}\r\n```\r\n\r\n##### clearfix <small>(m)</small>\r\nInserts the Clearfix.\r\n\r\n```scss\r\n// Example\r\n.clearfix {\r\n  @include clearfix;\r\n}\r\n\r\n// Result\r\n.clearfix:after {\r\n  content: '';\r\n  display: table;\r\n  clear: both;\r\n}\r\n```\r\n\r\n##### block-center <small>(m)</small>\r\nCenters a element.\r\n\r\n```scss\r\n// Example\r\n.center {\r\n  @include block-center();\r\n}\r\n\r\n// Result\r\n.center {\r\n  display: block;\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n}\r\n```\r\n\r\n##### word-wrap <small>(m)</small>\r\nBreaks long strings of words.\r\n\r\n```scss\r\n// Example\r\n.test {\r\n  @include word-wrap;\r\n}\r\n\r\n// Result\r\n.test {\r\n  -ms-word-break: break-all;\r\n  word-break: break-all;\r\n  word-break: break-word;\r\n  -webkit-hyphens: auto;\r\n  -moz-hyphens: auto;\r\n  -ms-hyphens: auto;\r\n  hyphens: auto;\r\n}\r\n```\r\n\r\n##### text-truncate <small>(m)</small>\r\nAlso Breaks long strings of words, but this time with an Ellipsis.\r\n\r\n```scss\r\n// Example\r\n.test {\r\n  @include text-truncate;\r\n}\r\n\r\n// Result\r\n.test {\r\n  max-width: 100%;\r\n  overflow: hidden;\r\n  text-overflow: ellipsis;\r\n  white-space: nowrap;\r\n  word-wrap: normal;\r\n}\r\n```\r\n\r\n##### vertical-center <small>(m)</small>\r\nPositioned centrally elements - the parent element must be set `display: table` be made.\r\n\r\n```scss\r\n// Example\r\n.test {\r\n  @include vertical-center;\r\n}\r\n\r\n// Result\r\n.test {\r\n  display: table-cell;\r\n  vertical-align: middle;\r\n}\r\n```\r\n\r\n##### cleartext <small>(m)</small>\r\nHides Text.\r\n\r\n```scss\r\n// Example\r\n.test {\r\n  @include cleartext;\r\n}\r\n\r\n// Result\r\n.test {\r\n  background-color: transparent;\r\n  border: 0;\r\n  color: transparent;\r\n  font: 0/0 a;\r\n  text-shadow: none;\r\n}\r\n```\r\n\r\n##### cleartext-complex <small>(m)</small>\r\nHides Text.\r\n\r\n```scss\r\n// Example\r\n.test {\r\n  @include cleartext-complex;\r\n}\r\n\r\n// Result\r\n.test {\r\n  background-color: transparent;\r\n  border: 0;\r\n  overflow: hidden;\r\n}\r\n.test:before {\r\n  content: '';\r\n  display: block;\r\n  width: 0;\r\n  height: 150%;\r\n}\r\n```\r\n\r\n##### cleartext-simpler <small>(m)</small>\r\nHides Text.\r\n\r\n```scss\r\n// Example\r\n.test {\r\n  @include cleartext-simpler;\r\n}\r\n\r\n// Result\r\n.test {\r\n  text-indent: 100%;\r\n  white-space: nowrap;\r\n  overflow: hidden;\r\n}\r\n```\r\n\r\n##### decollapse <small>(m)</small>\r\nPrevent collapsing margins.\r\n\r\n```scss\r\n// Example\r\n.test {\r\n  @include decollapse;\r\n}\r\n\r\n// Result\r\n.test {\r\n  padding-top: 1px;\r\n  margin-top: 1px;\r\n}\r\n```\r\n\r\n##### performance <small>(m)</small>\r\nEnables OpenGL acceleration.\r\n\r\n```scss\r\n// Example\r\n.test {\r\n  @include performance;\r\n}\r\n\r\n// Result\r\n.test {\r\n  transform: translate3d(0, 0, 0);\r\n}\r\n```\r\n\r\n##### antialias <small>(m)</small>\r\nEnable Antialias ​​- effective only on Chrome and Firefox.\r\n\r\n```scss\r\n// Example\r\n.test {\r\n  @include antialias;\r\n}\r\n\r\n// Result\r\n.test {\r\n  -webkit-font-smoothing: antialiased;\r\n  -moz-osx-font-smoothing: grayscale;\r\n}\r\n```\r\n\r\n#### Spacer\r\n`file: scr/sass/framework/modules/_spacer.scss`\r\n\r\n##### margin-padding <small>(m)</small>\r\nCalculates margin / padding for margin and padding mixins.\r\n\r\n- @access private\r\n\r\n##### padding <small>(m)</small>\r\nWith the mixin can write padding in the usual short form, but which are then written to individual declarations in the CSS.\r\n\r\n- @param {Bool|List} `$value` (false) - It generate all four sides, with different length of values.\r\n- @param {Bool} `$important` (false) - When the Values need hard overwritten. Otherwise set it to 'false', the parent Classname will be used as base name\r\n\r\n```scss\r\n// Example\r\n.padding-1 {\r\n  @include padding(20);\r\n}\r\n.padding-2 {\r\n  @include padding(20 10);\r\n}\r\n.padding-3 {\r\n  @include padding(20 1rem 0 10);\r\n}\r\n\r\n// Result\r\n.padding-1 {\r\n  padding-top: 20px;\r\n  padding-right: 20px;\r\n  padding-bottom: 20px;\r\n  padding-left: 20px;\r\n}\r\n.padding-2 {\r\n  padding-top: 20px;\r\n  padding-right: 10px;\r\n  padding-bottom: 20px;\r\n  padding-left: 10px;\r\n}\r\n.padding-3 {\r\n  padding-top: 20px;\r\n  padding-right: 1rem;\r\n  padding-bottom: 0px;\r\n  padding-left: 10px;\r\n}\r\n```\r\n\r\n##### margin <small>(m)</small>\r\nWith the mixin can write margin in the usual short form, but which are then written to individual declarations in the CSS.\r\n\r\n- @param {Bool|List} `$value` (false) - It generate all four sides, with different length of values.\r\n- @param {Bool} `$important` (false) - When the Values need hard overwritten. Otherwise set it to 'false', the parent Classname will be used as base name\r\n\r\n```scss\r\n// Example\r\n.margin-1 {\r\n  @include margin(0 10);\r\n}\r\n.margin-2 {\r\n  @include margin(.24rem 10);\r\n}\r\n.margin-3 {\r\n  @include margin(20 10 0 10);\r\n}\r\n\r\n// Result\r\n.margin-1 {\r\n  margin-top: 0px;\r\n  margin-right: 10px;\r\n  margin-bottom: 0px;\r\n  margin-left: 10px;\r\n}\r\n.margin-2 {\r\n  margin-top: 0.24rem;\r\n  margin-right: 10px;\r\n  margin-bottom: 0.24rem;\r\n  margin-left: 10px;\r\n}\r\n.margin-3 {\r\n  margin-top: 20px;\r\n  margin-right: 10px;\r\n  margin-bottom: 0px;\r\n  margin-left: 10px;\r\n}\r\n```\r\n\r\n##### spacer <small>(m)</small>\r\nCalculated on the basis of the Global Spacing Unit distances.\r\n\r\n- @requires `$kittn-global-spacing`\r\n- @param {List} `$options` - Spacing Type. `w`: width, `h`: height, `lh`: line-height, `pt`: padding-top, `pb`: padding-bottom, `pl`: padding-left, `pr`: padding-right, `mt`: margin-top, `mb`: margin-bottom, `ml`: margin-left, `mr`: margin-right, `mv`: margin-vertical, `mh`: margin-horizontal, `pv`: padding-vertical, `ph`: padding-horizontal\r\n- @param {Number} `$lines` (1) - Spacing Multiplicator\r\n- @param {Bool} `$important` (false) - Overwrite Values with !important\r\n- @param {Number} `$size` ($kittn-global-spacing) - Global Size Value\r\n\r\n```scss\r\n// Example\r\n.spacer-1 {\r\n  @include spacer(h);\r\n}\r\n.spacer-2 {\r\n  @include spacer(w,4);\r\n}\r\n.spacer-3 {\r\n  @include spacer(mt,4,true);\r\n}\r\n.spacer-4 {\r\n  @include spacer(h lh,2);\r\n}\r\n.spacer-5 {\r\n  @include spacer(mv h, .5 3);\r\n}\r\n\r\n// Result\r\n.spacer-1 {\r\n  height: 20px;\r\n}\r\n.spacer-2 {\r\n  width: 80px;\r\n}\r\n.spacer-3 {\r\n  margin-top: 80px !important;\r\n}\r\n.spacer-4 {\r\n  height: 40px;\r\n  line-height: 40px;\r\n}\r\n.spacer-5 {\r\n  margin-left: 10px;\r\n  margin-right: 10px;\r\n  height: 60px;\r\n}\r\n```\r\n\r\n##### Spacer-Reset <small>(m)</small>\r\nResets the set of spacers Mixin distances.\r\n\r\n- @param {List} `$options` - Spacing Type. `w`: width, `h`: height, `lh`: line-height, `pt`: padding-top, `pb`: padding-bottom, `pl`: padding-left, `pr`: padding-right, `mt`: margin-top, `mb`: margin-bottom, `ml`: margin-left, `mr`: margin-right, `mv`: margin-vertical, `mh`: margin-horizontal, `pv`: padding-vertical, `ph`: padding-horizontal\r\n- @param {Bool} `$important` (false) - Overwrite Values with !important\r\n\r\n```scss\r\n// Example\r\n.spacer-1 {\r\n  @include spacer-reset(h);\r\n}\r\n.spacer-2 {\r\n  @include spacer-reset(w);\r\n}\r\n.spacer-3 {\r\n  @include spacer-reset(mt,true);\r\n}\r\n.spacer-4 {\r\n  @include spacer-reset(h lh);\r\n}\r\n.spacer-5 {\r\n  @include spacer-reset(mv h);\r\n}\r\n\r\n// Result\r\n.spacer-1 {\r\n  height: inherit;\r\n}\r\n.spacer-2 {\r\n  width: inherit;\r\n}\r\n.spacer-3 {\r\n  margin-top: inherit !important;\r\n}\r\n.spacer-4 {\r\n  height: inherit;\r\n  line-height: inherit;\r\n}\r\n.spacer-5 {\r\n  margin-left: inherit;\r\n  margin-right: inherit;\r\n  height: inherit;\r\n}\r\n```\r\n\r\n#### Triangle\r\n`file: scr/sass/framework/modules/_triangle.scss`\r\n\r\n##### Triangle <small>(m)</small>\r\nGenerates triangles with Borders\r\n\r\n- @param {Map} `$values`\r\n- {color} `color` (#fff) - Trianglecolor\r\n- {number} `width` (15px) - Width\r\n- {number} `height` (15px) - Height\r\n- {*|number} `angle` - Values: `top`, `top left`, `right`, `bottom right`, `bottom`, `bottom left`, `left`, `top left`\r\n\r\n```scss\r\n// Example\r\n.triangle-1 {\r\n  &:before {\r\n    @include triangle(());\r\n  }\r\n}\r\n.triangle-2 {\r\n  &:before {\r\n    @include triangle((\r\n      color: red,\r\n      angle: 'right'\r\n    ));\r\n  }\r\n}\r\n.triangle-3 {\r\n  &:before {\r\n    @include triangle((\r\n      color: #1ec4ff,\r\n      height: 20px,\r\n      width: 20px,\r\n      angle: 45\r\n    ));\r\n  }\r\n}\r\n\r\n// Result\r\n.triangle-1:before {\r\n  display: block;\r\n  width: 0;\r\n  height: 0;\r\n  border: 0 solid transparent;\r\n  border-right-color: #fff;\r\n  border-width: 7.5px 15px 7.5px 0; }\r\n\r\n.triangle-2:before {\r\n  display: block;\r\n  width: 0;\r\n  height: 0;\r\n  border: 0 solid transparent;\r\n  border-left-color: red;\r\n  border-width: 7.5px 0 7.5px 15px; }\r\n\r\n.triangle-3:before {\r\n  display: block;\r\n  width: 0;\r\n  height: 0;\r\n  border: 0 solid transparent;\r\n  border-bottom-color: #1ec4ff;\r\n  border-width: 0 0px 20px 20px; }\r\n```\r\n\r\n#### Typography\r\n`file: scr/sass/framework/modules/_typography.scss`\r\n\r\n##### tw <small>(f)</small>\r\nPick Values from the Typostyle Map.\r\n\r\n- @requires `$kittn-typostyles-map`\r\n\r\n```scss\r\n// Example\r\n$kittn-typostyles-map: (\r\n  mega: (\r\n    font-size: 36,\r\n    line-height: d,\r\n    margin-bottom: 20,\r\n    font-weight: n,\r\n    tag: false,\r\n    extend: '%heading'\r\n  )\r\n);\r\n\r\n.test {\r\n  font-size: tw(mega, font-size) + 0px;\r\n}\r\n\r\n// Result\r\n.test {\r\n  font-size: 36px;\r\n}\r\n```\r\n\r\n##### typogenerator <small>(m)</small>\r\nGenerate the typostyles.\r\n\r\n- @requires `$kittn-generate-typostyles`, `$kittn-typostyles-map`\r\n\r\n```scss\r\n// Map\r\n// file: src/sass/setup.scss\r\n$kittn-typostyles-map: (\r\n  h1: (\r\n    font-size: 36,\r\n    line-height: d,\r\n    margin-bottom: false,\r\n    font-weight: false,\r\n    tag: true,\r\n    extend: '%heading'\r\n  ),\r\n  h2: (\r\n    font-size: 32,\r\n    line-height: d,\r\n    margin-bottom: 14,\r\n    font-weight: false,\r\n    tag: true,\r\n    extend: '%heading'\r\n  ),\r\n  small: (\r\n    font-size: 11,\r\n    line-height: d,\r\n    margin-bottom: false,\r\n    font-weight: false,\r\n    tag: false,\r\n    extend: '%extra'\r\n  ),\r\n  supersmall: (\r\n    font-size: 10,\r\n    line-height: c,\r\n    margin-bottom: 10,\r\n    font-weight: false,\r\n    tag: false,\r\n    extend: '%extra'\r\n  )\r\n);\r\n```\r\n\r\n```scss\r\n// Example\r\n@include typogenerator;\r\n\r\n// Result\r\n.h1, h1, .h2, h2 {\r\n  text-rendering: optimizeLegibility;\r\n  margin-bottom: 0rem;\r\n  color: #636363; }\r\n\r\n.small, .supersmall {\r\n  color: red;\r\n  margin-bottom: 20px; }\r\n\r\n.h1, h1 {\r\n  font-size: 2.647059rem;\r\n  line-height: 1; }\r\n\r\n.h2, h2 {\r\n  font-size: 2.352941rem;\r\n  line-height: 1;\r\n  margin-bottom: 1.029412rem; }\r\n\r\n.small {\r\n  font-size: 0.808824rem;\r\n  line-height: 1; }\r\n\r\n.supersmall {\r\n  font-size: 0.735294rem;\r\n  line-height: 0.911765rem;\r\n  margin-bottom: 0.735294rem; }\r\n\r\n```\r\n\r\n##### responsive-fontsizes <small>(m)</small>\r\nIf the font size defined in `rem`, one can make about the mixin the FontSize responsive. The Global size is listed in the `$kittn-breakpoint-map`.\r\n\r\nIs activated all over the `$ kittn-active-responsive-fonts` variable, it must be a value from 0 - 100 set.\r\n\r\n- @requires `$kittn-breakpoint-map`, `$kittn-activate`, `$kittn-active-responsive-fonts`\r\n\r\n```scss\r\n// Map and Vars\r\n// file: src/sass/setup.scss\r\n\r\n$kittn-breakpoint-map: (\r\n  1: (\r\n    size: 320px,\r\n    visibility: true,\r\n    step: true,\r\n    fontsize: false\r\n  ),\r\n  2: (\r\n    size: 480px,\r\n    visibility: false,\r\n    step: false,\r\n    fontsize: 80\r\n  ),\r\n  3: (\r\n    size: 560px,\r\n    visibility: false,\r\n    step: true,\r\n    fontsize: 90\r\n  )\r\n);\r\n\r\n$kittn-active-responsive-fonts: 70;\r\n```\r\n\r\n```scss\r\n// Example\r\n@include responsive-fontsize($base);\r\n\r\n// Result\r\nhtml {\r\n  font-size: 70%;\r\n}\r\n@media screen and (min-width: 480px) {\r\n  html {\r\n    font-size: 80%;\r\n  }\r\n}\r\n@media screen and (min-width: 560px) {\r\n  html {\r\n    font-size: 90%;\r\n  }\r\n}\r\n```\r\n\r\n##### get-fontsize <small>(m)</small>\r\nApplies the font size from the map.\r\n\r\n- @param {*} `$entry` - TypoKey\r\n\r\n```scss\r\n// Example\r\n.test {\r\n  @include get-fontsize(small);\r\n}\r\n\r\n// Result\r\n.test {\r\n  font-size: 0.808824rem;\r\n}\r\n```\r\n\r\n##### ext-typo <small>(m)</small>\r\nConnects to existing Typo classes.\r\n\r\n- @param {*} `$entry` - TypoKey\r\n\r\n```scss\r\n// Example\r\n.test {\r\n  @include ext-typo(h1);\r\n}\r\n\r\n// Result\r\n.h1, .test, h1, .h2, h2, h3, .h3 {\r\n  text-rendering: optimizeLegibility;\r\n  margin-bottom: 0rem;\r\n  color: #636363; }\r\n\r\n.h1, .test, h1 {\r\n  font-size: 2.647059rem;\r\n  line-height: 0.073529rem; }\r\n```\r\n\r\n---\r\n\r\n### Partials\r\n\r\n#### Normalize\r\n`fiel: scr/sass/framework/partials/_normalize.scss`\r\n\r\nThus, the basis of setting typo, font and layout is performed.\r\n\r\n#### Tables\r\n`file: scr/sass/framework/partials/_tables.scss`\r\n\r\nIntegrates a base style for tables.\r\n\r\n#### Pre-Generators\r\n`file: scr/sass/framework/partials/_pre-generators.scss`\r\n\r\nHere with generators are loaded must be loaded before the `normalize.scss`.\r\n\r\n#### Post-Generators\r\n`file: scr/sass/framework/partials/_post-generators.scss`\r\n\r\nHere with generators are loaded must be loaded after `normalize.scss`.\r\n\r\n---\r\n\r\n## Special Thanks to\r\n\r\n- Hugo Giraudel (@HugoGiraudel) - for his awesome Sass Scripts\r\n- Daniel Guillan (@danielguillan) - Modernizr Mixins\r\n- Team Sass - Jacket\r\n- Sam Richard (@Snugug) - EQ.js\r\n\r\n## License\r\n\r\n(MIT License)\r\n\r\nCopyright (c) 2014 Sascha Fuchs\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}