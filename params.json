{"name":"Generator-kittn","tagline":"The Yeoman Kittn Generator","body":"![](https://cloud.githubusercontent.com/assets/442468/3564677/85e7f014-0a93-11e4-93b7-95137d7cf008.png)\r\n\r\n# generator-kittn\r\n\r\n## Introduction\r\n\r\nWhy you name it 'Kittn'? Simple, the most People loves Kitten, and its time to bring more cuteness in tech industry :D\r\n\r\nKittn is a Toolkit, a collection of several components that will help the developers to work on the frontend. The most based on my own Experience.\r\n\r\nThe CSS does not offer Part prefabricated elements, like Bootstrap, it gives the developer rather the mixins in hand, to generate elements.\r\n\r\nAround the CSS part is a set of Grunt / Gulp task, bringing the eigentiche work is automated. My goal was to minimize errors in the daily Development by rules.\r\n\r\n## Dependencies\r\n\r\n- Sass 3.4.0.rc1\r\n- Gulp 3.8.0\r\n- Grunt 0.4.5\r\n- Jade 1.3.0\r\n- Yeoman 1.2.0\r\n\r\n## Installation\r\n\r\nPlease install or update your Ruby and Node environment. Optional install Homebrew.\r\n\r\nInstall the Dependencies - only when you don't have it installed on your Machine.\r\n\r\nInstall SASS\r\n```bash\r\ngem install sass --pre\r\n```\r\n\r\nInstall Jade\r\n```bash\r\nnpm install -g jade\r\n```\r\n\r\nInstall Gulp\r\n```bash\r\nnpm install -g gulp\r\n```\r\n\r\nInstall Grunt\r\n```bash\r\nnpm install -g grunt-cli\r\n```\r\n\r\nInstall Yeoman\r\n```bash\r\nnpm install -g yeoman\r\n```\r\n\r\nInstall Bower\r\n```bash\r\nnpm install -g bower\r\n```\r\n\r\nInstall Graphicsmagick\r\n```bash\r\nbrew install graphicsmagick\r\n```\r\n\r\nInstall libpng\r\n```bash\r\nbrew install libpng\r\n```\r\n\r\n## Using\r\n\r\nTo install generator-kittn from npm, run:\r\n\r\n```bash\r\n$ npm install -g generator-kittn\r\n```\r\n\r\nFinally, initiate the generator:\r\n\r\n```bash\r\n$ yo kittn\r\n```\r\n\r\nAfter the Installation is finished, its time to initiate the Project.\r\n\r\n```bash\r\ngulp init\r\n```\r\n\r\nGulp will start to build JS Files and Copy it from 'src' to the 'dist' directory. Be aware that you work only on the 'src' directory, anything in 'dist' will be produced (it will be overwritten).\r\n\r\nNow the begin the Magic\r\n\r\n```bash\r\ngulp\r\n```\r\n\r\nDead Simple. Gulp will now activate the watch tasks, a change on Sass, Jade or JS Files will active the Compilers (in the Case of Jade only a JSHint). Also will start a Server, you will see your Changes on the Browser without a manually reload.\r\n\r\nYou can also activate an extende Watch Task, Gulp will now watch also on Images Changes.\r\n\r\n```bash\r\ngulp extended\r\n```\r\n\r\nThe Image files are 'src/stash/images/css-images/', any change here, the Files will be copied in your 'dist' directory. Any Image-Data (name, widht, height), will be saved in a Imagemap, Sprites will be rerendered. You can use a Sass Mixin to include in a easy way Image Files in your Sass File.\r\n\r\nSass, yes. You work on a '_workfile', don't touch 'style.scss'. Any change on the Workfile flows in the style.scss that compiled to a style.css File. I work on one central File, specific Styles will be routed to different Files - https://github.com/Team-Sass/jacket.\r\n\r\n### Image Assets\r\nPut your Image Assets in the 'src/stash/images/' Folder. The PSDs are for Photoshop CC Users, in this case you put all Images on the PSDs and the Photoshop Generator will do the Rest :) (http://blogs.adobe.com/photoshopdotcom/2013/09/introducing-adobe-generator-for-photoshop-cc.html. )\r\n\r\n- sprite.psd => Your Images for Sprites\r\n- single.psd => Image Files that not used as textures\r\n- texture.psd => Image Files that used as texture\r\n\r\nWhen the PS Generator have saved the Assets for you, than you can Update you Image Assets\r\n\r\n```bash\r\ngulp grunt-imageUpdate\r\n```\r\n\r\nIn this Case is a Grunt Task. First your Imagefiles in 'dist' will be cleaned, that a new Sprite will be generated, SVG will be minified and build a PNG Fallback. Single and Texture Images will be copied to 'dist', and a new image map is generated.\r\n\r\n### JS Files\r\n- need to be finished\r\n\r\n### Generate CSS\r\n- need to be finished\r\n\r\n### Generate HTML\r\n- need to be finished\r\n\r\n### Various Grunt&Gulp Tasks\r\n- need to be finished\r\n\r\n---- \r\n\r\n## Getting To Know Yeoman\r\n\r\nYeoman has a heart of gold. He's a person with feelings and opinions, but he's very easy to work with. If you think he's too opinionated, he can be easily convinced.\r\n\r\nIf you'd like to get to know Yeoman better and meet some of his friends, [Grunt](http://gruntjs.com) and [Bower](http://bower.io), check out the complete [Getting Started Guide](https://github.com/yeoman/yeoman/wiki/Getting-Started).\r\n\r\n--- \r\n\r\n## Special Thanks to\r\n\r\n- Hugo Giraudel (@HugoGiraudel) - for his awesome Sass Scripts\r\n- Daniel Guillan (@danielguillan) - Modernizr Mixins\r\n\r\n## License\r\n\r\nMIT\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}